LavaPack.loadBundle([[73,{"../../../../shared/constants/network":7060,"./handlers":77,"@metamask/controllers":1294,"@metamask/rpc-methods/dist/permitted":1479,"@metamask/rpc-methods/dist/utils":1491,"eth-rpc-errors":2821,lodash:6046},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.createMethodMiddleware=function(e){const t=u.filter((t=>!Object.hasOwnProperty.call(e,t)));if(t.length>0)throw new Error(`Missing expected hooks:\n\n${t.join("\n")}\n`);return async function(t,r,n,s){if(l.UNSUPPORTED_RPC_METHODS.has(t.method))return s(a.ethErrors.rpc.methodNotSupported());const o=h.get(t.method);if(o){const{implementation:a,hookNames:c}=o;try{return await a(t,r,n,s,(0,i.selectHooks)(e,c))}catch(e){return console.error(e),s(e)}}return n()}},r.createSnapMethodMiddleware=function(e,t){return async function(r,n,s,o){const c=p.get(r.method);if(c){if(/^snap_/iu.test(r.method)&&!e)return o(a.ethErrors.rpc.methodNotFound());const{implementation:l,hookNames:d}=c;try{return await l(r,n,s,o,(0,i.selectHooks)(t,d))}catch(e){return console.error(e),o(e)}}return s()}};var n,s=e("@metamask/rpc-methods/dist/permitted"),o=e("@metamask/controllers"),i=e("@metamask/rpc-methods/dist/utils"),a=e("eth-rpc-errors"),c=e("lodash"),l=e("../../../../shared/constants/network");const d=[...((n=e("./handlers"))&&n.__esModule?n:{default:n}).default,...o.permissionRpcMethods.handlers],h=d.reduce(((e,t)=>{for(const r of t.methodNames)e.set(r,t);return e}),new Map),u=Array.from(new Set((0,c.flatten)(d.map((({hookNames:e})=>Object.keys(e))))).values());const p=s.handlers.reduce(((e,t)=>{for(const r of t.methodNames)e.set(r,t);return e}),new Map)}}},{package:"$root$"}],[74,{"../../../../../shared/constants/app":7055,"../../../../../shared/constants/metametrics":7059,"../../../../../shared/constants/network":7060,"../../../../../shared/modules/network.utils":7083,"../../../../../shared/modules/rpc.utils":7086,"eth-rpc-errors":2821,lodash:6046,"valid-url":6903},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,s=e("eth-rpc-errors"),o=(n=e("valid-url"))&&n.__esModule?n:{default:n},i=e("lodash"),a=e("../../../../../shared/constants/app"),c=e("../../../../../shared/constants/metametrics"),l=e("../../../../../shared/modules/network.utils"),d=e("../../../../../shared/modules/rpc.utils"),h=e("../../../../../shared/constants/network");var u={methodNames:[a.MESSAGE_TYPE.ADD_ETHEREUM_CHAIN],implementation:async function(e,t,r,n,{addCustomRpc:u,getCurrentChainId:p,getCurrentRpcUrl:g,findCustomRpcBy:m,updateRpcTarget:f,requestUserApproval:y,sendMetrics:C}){var b;if(null===(b=e.params)||void 0===b||!b[0]||"object"!=typeof e.params[0])return n(s.ethErrors.rpc.invalidParams({message:`Expected single, object parameter. Received:\n${JSON.stringify(e.params)}`}));const{origin:k}=e,{chainId:S,chainName:w=null,blockExplorerUrls:v=null,nativeCurrency:E=null,rpcUrls:T}=e.params[0],M=Object.keys((0,i.omit)(e.params[0],["chainId","chainName","blockExplorerUrls","iconUrls","rpcUrls","nativeCurrency"]));if(M.length>0)return n(s.ethErrors.rpc.invalidParams({message:`Received unexpected keys on object parameter. Unsupported keys:\n${M}`}));const A=e=>{try{const t=new URL(e);return"localhost"===t.hostname||"127.0.0.1"===t.hostname}catch(e){return!1}},P=Array.isArray(T)?T.find((e=>A(e)||o.default.isHttpsUri(e))):null,_=null!==v&&Array.isArray(v)?v.find((e=>A(e)||o.default.isHttpsUri(e))):null;if(!P)return n(s.ethErrors.rpc.invalidParams({message:`Expected an array with at least one valid string HTTPS url 'rpcUrls', Received:\n${T}`}));if(null!==v&&!_)return n(s.ethErrors.rpc.invalidParams({message:`Expected null or array with at least one valid string HTTPS URL 'blockExplorerUrl'. Received: ${v}`}));const R="string"==typeof S&&S.toLowerCase();if(!(0,l.isPrefixedFormattedHexString)(R))return n(s.ethErrors.rpc.invalidParams({message:`Expected 0x-prefixed, unpadded, non-zero hexadecimal string 'chainId'. Received:\n${S}`}));if(!(0,l.isSafeChainId)(parseInt(R,16)))return n(s.ethErrors.rpc.invalidParams({message:`Invalid chain ID "${R}": numerical value greater than max safe value. Received:\n${S}`}));if(h.CHAIN_ID_TO_NETWORK_ID_MAP[R])return n(s.ethErrors.rpc.invalidParams({message:"May not specify default MetaMask chain."}));const I=m({chainId:R});if(I&&I.rpcUrl===P){t.result=null;const e=p(),r=g();if(e===R&&r===P)return n();try{await f(await y({origin:k,type:a.MESSAGE_TYPE.SWITCH_ETHEREUM_CHAIN,requestData:{rpcUrl:I.rpcUrl,chainId:I.chainId,nickname:I.nickname,ticker:I.ticker}})),t.result=null}catch(e){if(e.code!==s.errorCodes.provider.userRejectedRequest)return n(e)}return n()}let N;try{N=await(0,d.jsonRpcRequest)(P,"eth_chainId")}catch(e){return n(s.ethErrors.rpc.internal({message:`Request for method 'eth_chainId on ${P} failed`,data:{networkErr:e}}))}if(R!==N)return n(s.ethErrors.rpc.invalidParams({message:`Chain ID returned by RPC URL ${P} does not match ${R}`,data:{chainId:N}}));if("string"!=typeof w||!w)return n(s.ethErrors.rpc.invalidParams({message:`Expected non-empty string 'chainName'. Received:\n${w}`}));const x=w.length>100?w.substring(0,100):w;if(null!==E){if("object"!=typeof E||Array.isArray(E))return n(s.ethErrors.rpc.invalidParams({message:`Expected null or object 'nativeCurrency'. Received:\n${E}`}));if(18!==E.decimals)return n(s.ethErrors.rpc.invalidParams({message:`Expected the number 18 for 'nativeCurrency.decimals' when 'nativeCurrency' is provided. Received: ${E.decimals}`}));if(!E.symbol||"string"!=typeof E.symbol)return n(s.ethErrors.rpc.invalidParams({message:`Expected a string 'nativeCurrency.symbol'. Received: ${E.symbol}`}))}const O=(null==E?void 0:E.symbol)||a.UNKNOWN_TICKER_SYMBOL;if(O!==a.UNKNOWN_TICKER_SYMBOL&&("string"!=typeof O||O.length<2||O.length>6))return n(s.ethErrors.rpc.invalidParams({message:`Expected 2-6 character string 'nativeCurrency.symbol'. Received:\n${O}`}));if(I&&I.chainId===R&&I.ticker!==O)return n(s.ethErrors.rpc.invalidParams({message:`nativeCurrency.symbol does not match currency symbol for a network the user already has added with the same chainId. Received:\n${O}`}));try{let e;await u(await y({origin:k,type:a.MESSAGE_TYPE.ADD_ETHEREUM_CHAIN,requestData:{chainId:R,blockExplorerUrl:_,chainName:x,rpcUrl:P,ticker:O}}));try{e=new URL(P).origin}catch{}C({event:"Custom Network Added",category:c.EVENT.CATEGORIES.NETWORK,referrer:{url:k},properties:{chain_id:R,network_name:x,network:e,symbol:O,block_explorer_url:_,source:c.EVENT.SOURCE.TRANSACTION.DAPP},sensitiveProperties:{rpc_url:e}}),t.result=null}catch(e){return n(e)}try{await f(await y({origin:k,type:a.MESSAGE_TYPE.SWITCH_ETHEREUM_CHAIN,requestData:{rpcUrl:P,chainId:R,nickname:x,ticker:O}}))}catch(e){if(e.code!==s.errorCodes.provider.userRejectedRequest)return n(e)}return n()},hookNames:{addCustomRpc:!0,getCurrentChainId:!0,getCurrentRpcUrl:!0,findCustomRpcBy:!0,updateRpcTarget:!0,requestUserApproval:!0,sendMetrics:!0}};r.default=u}}},{package:"$root$"}],[75,{"../../../../../shared/constants/app":7055},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n={methodNames:[e("../../../../../shared/constants/app").MESSAGE_TYPE.ETH_ACCOUNTS],implementation:async function(e,t,r,n,{getAccounts:s}){return t.result=await s(),n()},hookNames:{getAccounts:!0}};r.default=n}}},{package:"$root$"}],[754,{},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.version=void 0,r.version="web/5.7.0"}}},{package:"@eth-optimism/contracts>@ethersproject/abstract-provider>@ethersproject/web"}],[755,{"@ethersproject/bytes":674},function(){with(this)return function(){"use strict";return function(e,t,r){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(s,o){function i(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,a)}c((n=n.apply(e,t||[])).next())}))},s=this&&this.__generator||function(e,t){var r,n,s,o,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,n&&(s=2&o[0]?n.return:o[0]?n.throw||((s=n.return)&&s.call(n),0):n.next)&&!(s=s.call(n,o[1])).done)return s;switch(n=0,s&&(o=[2&o[0],s.value]),o[0]){case 0:case 1:s=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,n=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(s=i.trys,(s=s.length>0&&s[s.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!s||o[1]>s[0]&&o[1]<s[3])){i.label=o[1];break}if(6===o[0]&&i.label<s[1]){i.label=s[1],s=o;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(o);break}s[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],n=0}finally{r=s=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(r,"__esModule",{value:!0}),r.getUrl=void 0;var o=e("@ethersproject/bytes");r.getUrl=function(e,t){return n(this,void 0,void 0,(function(){var r,n,i,a,c;return s(this,(function(s){switch(s.label){case 0:return null==t&&(t={}),r={method:t.method||"GET",headers:t.headers||{},body:t.body||undefined},!0!==t.skipFetchSetup&&(r.mode="cors",r.cache="no-cache",r.credentials="same-origin",r.redirect="follow",r.referrer="client"),null!=t.fetchOptions&&((n=t.fetchOptions).mode&&(r.mode=n.mode),n.cache&&(r.cache=n.cache),n.credentials&&(r.credentials=n.credentials),n.redirect&&(r.redirect=n.redirect),n.referrer&&(r.referrer=n.referrer)),[4,fetch(e,r)];case 1:return[4,(i=s.sent()).arrayBuffer()];case 2:return a=s.sent(),c={},i.headers.forEach?i.headers.forEach((function(e,t){c[t.toLowerCase()]=e})):i.headers.keys().forEach((function(e){c[e.toLowerCase()]=i.headers.get(e)})),[2,{headers:c,statusCode:i.status,statusMessage:i.statusText,body:(0,o.arrayify)(new Uint8Array(a))}]}}))}))}}}},{package:"@eth-optimism/contracts>@ethersproject/abstract-provider>@ethersproject/web"}],[756,{"./_version":754,"./geturl":755,"@ethersproject/base64":666,"@ethersproject/bytes":674,"@ethersproject/logger":702,"@ethersproject/properties":708,"@ethersproject/strings":746},function(){with(this)return function(){"use strict";return function(e,t,r){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(s,o){function i(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,a)}c((n=n.apply(e,t||[])).next())}))},s=this&&this.__generator||function(e,t){var r,n,s,o,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,n&&(s=2&o[0]?n.return:o[0]?n.throw||((s=n.return)&&s.call(n),0):n.next)&&!(s=s.call(n,o[1])).done)return s;switch(n=0,s&&(o=[2&o[0],s.value]),o[0]){case 0:case 1:s=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,n=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(s=i.trys,(s=s.length>0&&s[s.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!s||o[1]>s[0]&&o[1]<s[3])){i.label=o[1];break}if(6===o[0]&&i.label<s[1]){i.label=s[1],s=o;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(o);break}s[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],n=0}finally{r=s=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(r,"__esModule",{value:!0}),r.poll=r.fetchJson=r._fetchData=void 0;var o=e("@ethersproject/base64"),i=e("@ethersproject/bytes"),a=e("@ethersproject/properties"),c=e("@ethersproject/strings"),l=e("@ethersproject/logger"),d=e("./_version"),h=new l.Logger(d.version),u=e("./geturl");function p(e){return new Promise((function(t){setTimeout(t,e)}))}function g(e,t){if(null==e)return null;if("string"==typeof e)return e;if((0,i.isBytesLike)(e)){if(t&&("text"===t.split("/")[0]||"application/json"===t.split(";")[0].trim()))try{return(0,c.toUtf8String)(e)}catch(e){}return(0,i.hexlify)(e)}return e}function m(e,t,r){var i="object"==typeof e&&null!=e.throttleLimit?e.throttleLimit:12;h.assertArgument(i>0&&i%1==0,"invalid connection throttle limit","connection.throttleLimit",i);var d="object"==typeof e?e.throttleCallback:null,m="object"==typeof e&&"number"==typeof e.throttleSlotInterval?e.throttleSlotInterval:100;h.assertArgument(m>0&&m%1==0,"invalid connection throttle slot interval","connection.throttleSlotInterval",m);var f="object"==typeof e&&!!e.errorPassThrough,y={},C=null,b={method:"GET"},k=!1,S=12e4;if("string"==typeof e)C=e;else if("object"==typeof e){if(null!=e&&null!=e.url||h.throwArgumentError("missing URL","connection.url",e),C=e.url,"number"==typeof e.timeout&&e.timeout>0&&(S=e.timeout),e.headers)for(var w in e.headers)y[w.toLowerCase()]={key:w,value:String(e.headers[w])},["if-none-match","if-modified-since"].indexOf(w.toLowerCase())>=0&&(k=!0);if(b.allowGzip=!!e.allowGzip,null!=e.user&&null!=e.password){"https:"!==C.substring(0,6)&&!0!==e.allowInsecureAuthentication&&h.throwError("basic authentication requires a secure https url",l.Logger.errors.INVALID_ARGUMENT,{argument:"url",url:C,user:e.user,password:"[REDACTED]"});var v=e.user+":"+e.password;y.authorization={key:"Authorization",value:"Basic "+(0,o.encode)((0,c.toUtf8Bytes)(v))}}null!=e.skipFetchSetup&&(b.skipFetchSetup=!!e.skipFetchSetup),null!=e.fetchOptions&&(b.fetchOptions=(0,a.shallowCopy)(e.fetchOptions))}var E=new RegExp("^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$","i"),T=C?C.match(E):null;if(T)try{var M={statusCode:200,statusMessage:"OK",headers:{"content-type":T[1]},body:(0,o.decode)(T[2])},A=M.body;return r&&(A=r(M.body,M)),Promise.resolve(A)}catch(e){h.throwError("processing response error",l.Logger.errors.SERVER_ERROR,{body:g(T[1],T[2]),error:e,requestBody:null,requestMethod:"GET",url:C})}t&&(b.method="POST",b.body=t,null==y["content-type"]&&(y["content-type"]={key:"Content-Type",value:"application/octet-stream"}),null==y["content-length"]&&(y["content-length"]={key:"Content-Length",value:String(t.length)}));var P={};Object.keys(y).forEach((function(e){var t=y[e];P[t.key]=t.value})),b.headers=P;var _,R=(_=null,{promise:new Promise((function(e,t){S&&(_=setTimeout((function(){null!=_&&(_=null,t(h.makeError("timeout",l.Logger.errors.TIMEOUT,{requestBody:g(b.body,P["content-type"]),requestMethod:b.method,timeout:S,url:C})))}),S))})),cancel:function(){null!=_&&(clearTimeout(_),_=null)}}),I=function(){return n(this,void 0,void 0,(function(){var e,t,n,o,a,c,y,S,w;return s(this,(function(s){switch(s.label){case 0:e=0,s.label=1;case 1:if(!(e<i))return[3,20];t=null,s.label=2;case 2:return s.trys.push([2,9,,10]),[4,(0,u.getUrl)(C,b)];case 3:return t=s.sent(),e<i?301!==t.statusCode&&302!==t.statusCode?[3,4]:(n=t.headers.location||"","GET"===b.method&&n.match(/^https:/)?(C=t.headers.location,[3,19]):[3,8]):[3,8];case 4:return 429!==t.statusCode?[3,8]:(w=!0,d?[4,d(e,C)]:[3,6]);case 5:w=s.sent(),s.label=6;case 6:return w?(0,o=t.headers["retry-after"],[4,p("string"==typeof o&&o.match(/^[1-9][0-9]*$/)?1e3*parseInt(o):m*parseInt(String(Math.random()*Math.pow(2,e))))]):[3,8];case 7:return s.sent(),[3,19];case 8:return[3,10];case 9:return a=s.sent(),null==(t=a.response)&&(R.cancel(),h.throwError("missing response",l.Logger.errors.SERVER_ERROR,{requestBody:g(b.body,P["content-type"]),requestMethod:b.method,serverError:a,url:C})),[3,10];case 10:if(c=t.body,k&&304===t.statusCode?c=null:!f&&(t.statusCode<200||t.statusCode>=300)&&(R.cancel(),h.throwError("bad response",l.Logger.errors.SERVER_ERROR,{status:t.statusCode,headers:t.headers,body:g(c,t.headers?t.headers["content-type"]:null),requestBody:g(b.body,P["content-type"]),requestMethod:b.method,url:C})),!r)return[3,18];s.label=11;case 11:return s.trys.push([11,13,,18]),[4,r(c,t)];case 12:return y=s.sent(),R.cancel(),[2,y];case 13:return(S=s.sent()).throttleRetry&&e<i?(w=!0,d?[4,d(e,C)]:[3,15]):[3,17];case 14:w=s.sent(),s.label=15;case 15:return w?[4,p(m*parseInt(String(Math.random()*Math.pow(2,e))))]:[3,17];case 16:return s.sent(),[3,19];case 17:return R.cancel(),h.throwError("processing response error",l.Logger.errors.SERVER_ERROR,{body:g(c,t.headers?t.headers["content-type"]:null),error:S,requestBody:g(b.body,P["content-type"]),requestMethod:b.method,url:C}),[3,18];case 18:return R.cancel(),[2,c];case 19:return e++,[3,1];case 20:return[2,h.throwError("failed response",l.Logger.errors.SERVER_ERROR,{requestBody:g(b.body,P["content-type"]),requestMethod:b.method,url:C})]}}))}))}();return Promise.race([R.promise,I])}r._fetchData=m,r.fetchJson=function(e,t,r){var n=null;if(null!=t){n=(0,c.toUtf8Bytes)(t);var s="string"==typeof e?{url:e}:(0,a.shallowCopy)(e);if(s.headers)0!==Object.keys(s.headers).filter((function(e){return"content-type"===e.toLowerCase()})).length||(s.headers=(0,a.shallowCopy)(s.headers),s.headers["content-type"]="application/json");else s.headers={"content-type":"application/json"};e=s}return m(e,n,(function(e,t){var n=null;if(null!=e)try{n=JSON.parse((0,c.toUtf8String)(e))}catch(t){h.throwError("invalid JSON",l.Logger.errors.SERVER_ERROR,{body:e,error:t})}return r&&(n=r(n,t)),n}))},r.poll=function(e,t){return t||(t={}),null==(t=(0,a.shallowCopy)(t)).floor&&(t.floor=0),null==t.ceiling&&(t.ceiling=1e4),null==t.interval&&(t.interval=250),new Promise((function(r,n){var s=null,o=!1,i=function(){return!o&&(o=!0,s&&clearTimeout(s),!0)};t.timeout&&(s=setTimeout((function(){i()&&n(new Error("timeout"))}),t.timeout));var a=t.retryLimit,c=0;!function s(){return e().then((function(e){if(e!==undefined)i()&&r(e);else if(t.oncePoll)t.oncePoll.once("poll",s);else if(t.onceBlock)t.onceBlock.once("block",s);else if(!o){if(++c>a)return void(i()&&n(new Error("retry limit reached")));var l=t.interval*parseInt(String(Math.random()*Math.pow(2,c)));l<t.floor&&(l=t.floor),l>t.ceiling&&(l=t.ceiling),setTimeout(s,l)}return null}),(function(e){i()&&n(e)}))}()}))}}}},{package:"@eth-optimism/contracts>@ethersproject/abstract-provider>@ethersproject/web"}],[76,{"../../../../../shared/constants/app":7055},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n={methodNames:[e("../../../../../shared/constants/app").MESSAGE_TYPE.GET_PROVIDER_STATE],implementation:async function(e,t,r,n,{getProviderState:s}){return t.result={...await s(e.origin)},n()},hookNames:{getProviderState:!0}};r.default=n}}},{package:"$root$"}],[77,{"./add-ethereum-chain":74,"./eth-accounts":75,"./get-provider-state":76,"./log-web3-shim-usage":78,"./request-accounts":79,"./send-metadata":80,"./switch-ethereum-chain":81,"./watch-asset":82},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=h(e("./add-ethereum-chain")),s=h(e("./eth-accounts")),o=h(e("./get-provider-state")),i=h(e("./log-web3-shim-usage")),a=h(e("./request-accounts")),c=h(e("./send-metadata")),l=h(e("./switch-ethereum-chain")),d=h(e("./watch-asset"));function h(e){return e&&e.__esModule?e:{default:e}}var u=[n.default,s.default,o.default,i.default,a.default,c.default,l.default,d.default];r.default=u}}},{package:"$root$"}],[78,{"../../../../../shared/constants/app":7055,"../../../../../shared/constants/metametrics":7059},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("../../../../../shared/constants/app"),s=e("../../../../../shared/constants/metametrics");var o={methodNames:[n.MESSAGE_TYPE.LOG_WEB3_SHIM_USAGE],implementation:function(e,t,r,n,{sendMetrics:o,getWeb3ShimUsageState:i,setWeb3ShimUsageRecorded:a}){const{origin:c}=e;i(c)===undefined&&(a(c),o({event:"Website Accessed window.web3 Shim",category:s.EVENT.CATEGORIES.INPAGE_PROVIDER,referrer:{url:c}},{excludeMetaMetricsId:!0}));return t.result=!0,n()},hookNames:{sendMetrics:!0,getWeb3ShimUsageState:!0,setWeb3ShimUsageRecorded:!0}};r.default=o}}},{package:"$root$"}],[783,{"@ethereumjs/tx":626,"@ethereumjs/util":636,"@keystonehq/bc-ur-registry-eth":789,buffer:2438,hdkey:5270,rlp:786,uuid:6888},function(){with(this)return function(){"use strict";return function(e,t,r){(function(t){(function(){function n(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(r,"__esModule",{value:!0});var s=n(e("hdkey")),o=e("@ethereumjs/util"),i=n(e("rlp")),a=e("@ethereumjs/tx"),c=e("@keystonehq/bc-ur-registry-eth"),l=e("uuid");const d="QR Hardware Wallet Device",h="m",u="0/*";var p,g;!function(e){e.hd="hd",e.pubkey="pubkey"}(p||(p={})),function(e){e.standard="account.standard",e.ledger_live="account.ledger_live",e.ledger_legacy="account.ledger_legacy"}(g||(g={}));class m{constructor(e){this.version=1,this.getInteraction=()=>{throw new Error("KeystoneError#invalid_extends: method getInteraction not implemented, please extend BaseKeyring by overwriting this method.")},this.type=d,this.requestSignature=async(e,t,r,n)=>{const s=await this.getInteraction().requestSignature(t,r,n),o=s.getRequestId(),i=s.getSignature();if(o){if(l.stringify(o)!==e)throw new Error("KeystoneError#invalid_data: read signature error: mismatched requestId")}return{r:i.slice(0,32),s:i.slice(32,64),v:i.slice(64)}},this.__readCryptoHDKey=e=>{var t,r;const n=`m/${e.getOrigin().getPath()}`,s=null==(t=e.getOrigin().getSourceFingerprint())?void 0:t.toString("hex"),o=(null==(r=e.getChildren())?void 0:r.getPath())||u,i=e.getName();if(e.getNote()===g.standard?this.keyringAccount=g.standard:e.getNote()===g.ledger_legacy&&(this.keyringAccount=g.ledger_legacy),!s)throw new Error("KeystoneError#invalid_data: invalid crypto-hdkey, cannot get source fingerprint");const a=e.getBip32Key();this.xfp=s,this.xpub=a,this.hdPath=n,this.childrenPath=o,i!==undefined&&""!==i&&(this.name=i),this.initialized=!0},this.__readCryptoAccount=e=>{var t,r;const n=null==(t=e.getMasterFingerprint())?void 0:t.toString("hex");if(!n)throw new Error("KeystoneError#invalid_data: invalid crypto-account, cannot get master fingerprint");this.xfp=n,this.initialized=!0;let s=!1;const i=e.getOutputDescriptors();if(!i||0===i.length)throw new Error("KeystoneError#invalid_data: invalid crypto-account, no crypto output found");if(i.length%5!=0)throw new Error("KeystoneError#invalid_data: only support 5x pubkey accounts for now");return null==(r=e.getOutputDescriptors())||r.forEach((e=>{try{const t=e.getHDKey();if(t){const e=t.getKey(),r=`M/${t.getOrigin().getPath()}`,n="0x"+o.publicToAddress(e,!0).toString("hex");this.name=t.getName(),t.getNote()===g.ledger_live&&(this.keyringAccount=g.ledger_live),this.paths[o.toChecksumAddress(n)]===undefined&&(s=!0),this.paths[o.toChecksumAddress(n)]=r}}catch(e){throw new Error(`KeystoneError#invalid_data: ${e}`)}})),s},this.getName=()=>this.name,this.setAccountToUnlock=e=>{this.unlockedAccount=parseInt(e,10)},this.__getNormalPage=async e=>{this.page+=e,this.page<=0&&(this.page=1);const t=(this.page-1)*this.perPage,r=t+this.perPage,n=[];for(let e=t;e<r;e++){const t=await this.__addressFromIndex(h,e);n.push({address:t,balance:null,index:e}),this.indexes[o.toChecksumAddress(t)]=e}return n},this.__getLedgerLivePage=async e=>{const t=(this.page+e-1)*this.perPage,r=t+this.perPage,n=[];for(let e=t;e<r;e++){const t=await this.__addressFromIndex(h,e);n.push({address:t,balance:null,index:e})}return this.page+=e,n},this.__addressFromIndex=async(e,t)=>{if(this.keyringMode===p.hd){this.checkKeyring(),this.hdk||(this.hdk=s.fromExtendedKey(this.xpub));const r=this.childrenPath.replace("*",String(t)).replace(/\*/g,"0"),n=this.hdk.derive(`${e}/${r}`),i="0x"+o.publicToAddress(n.publicKey,!0).toString("hex");return o.toChecksumAddress(i)}{const e=Object.keys(this.paths)[t];if(e)return o.toChecksumAddress(e);throw new Error("KeystoneError#pubkey_account.no_expected_account")}},this.page=0,this.perPage=5,this.accounts=[],this.currentAccount=0,this.unlockedAccount=0,this.name="QR Hardware",this.keyringMode=p.hd,this.keyringAccount=g.standard,this.initialized=!1,this.xfp="",this.xpub="",this.hdPath="",this.childrenPath=u,this.indexes={},this.paths={},this.deserialize(e)}async readKeyring(){const e=await this.getInteraction().readCryptoHDKeyOrCryptoAccount();this.syncKeyring(e)}syncKeyring(e){e.getRegistryType().getType()===c.extend.RegistryTypes.CRYPTO_HDKEY.getType()?(this.keyringMode=p.hd,this.__readCryptoHDKey(e)):(this.keyringMode=p.pubkey,this.__readCryptoAccount(e))}checkKeyring(){if(!this.xfp||!this.xpub||!this.hdPath)throw new Error("KeystoneError#invalid_keyring: keyring not fulfilled, please call function `readKeyring` firstly")}serialize(){return Promise.resolve({initialized:this.initialized,accounts:this.accounts,currentAccount:this.currentAccount,page:this.page,perPage:this.perPage,keyringAccount:this.keyringAccount,keyringMode:this.keyringMode,name:this.name,version:this.version,xfp:this.xfp,xpub:this.xpub,hdPath:this.hdPath,childrenPath:this.childrenPath,indexes:this.indexes,paths:this.paths})}deserialize(e){e&&(this.accounts=e.accounts,this.currentAccount=e.currentAccount,this.page=e.page,this.perPage=e.perPage,this.name=e.name,this.initialized=e.initialized,this.keyringMode=e.keyringMode||p.hd,this.keyringAccount=e.keyringAccount||g.standard,this.xfp=e.xfp,this.xpub=e.xpub,this.hdPath=e.hdPath,this.indexes=e.indexes,this.paths=e.paths,this.childrenPath=e.childrenPath||u)}setCurrentAccount(e){this.currentAccount=e}getCurrentAccount(){return this.currentAccount}getCurrentAddress(){return this.accounts[this.currentAccount]}async addAccounts(e=1){const t=this.unlockedAccount,r=t+e,n=[];for(let e=t;e<r;e++){const t=await this.__addressFromIndex(h,e);n.push(t),this.page=0,this.unlockedAccount++}return this.accounts=this.accounts.concat(n),this.accounts}getFirstPage(){return this.page=0,this.__getPage(1)}getNextPage(){return this.__getPage(1)}getPreviousPage(){return this.__getPage(-1)}async __getPage(e){return this.initialized||await this.readKeyring(),this.keyringMode===p.hd?this.__getNormalPage(e):this.__getLedgerLivePage(e)}getAccounts(){return Promise.resolve(this.accounts)}removeAccount(e){if(!this.accounts.map((e=>e.toLowerCase())).includes(e.toLowerCase()))throw new Error(`Address ${e} not found in this keyring`);this.accounts=this.accounts.filter((t=>t.toLowerCase()!==e.toLowerCase()))}async signTransaction(e,r){const n=0===r.type?c.DataType.transaction:c.DataType.typedTransaction;let s;s=0===r.type?t.from(i.encode(r.getMessageToSign(!1))):r.getMessageToSign(!1);const o=await this._pathFromAddress(e),d=r.common.chainId(),h=l.v4(),u=c.EthSignRequest.constructETHRequest(s,n,o,this.xfp,h,d),{r:p,s:g,v:m}=await this.requestSignature(h,u,"Scan with your Keystone",'After your Keystone has signed the transaction, click on "Scan Keystone" to receive the signature');return a.TransactionFactory.fromTxData({...r.toJSON(),type:r.type,r:p,s:g,v:m},{common:r.common})}signMessage(e,t){return this.signPersonalMessage(e,t)}async signPersonalMessage(e,r){const n=o.stripHexPrefix(r),s=await this._pathFromAddress(e),i=l.v4(),a=c.EthSignRequest.constructETHRequest(t.from(n,"hex"),c.DataType.personalMessage,s,this.xfp,i,undefined,e),{r:d,s:h,v:u}=await this.requestSignature(i,a,"Scan with your Keystone",'After your Keystone has signed this message, click on "Scan Keystone" to receive the signature');return"0x"+t.concat([d,h,u]).toString("hex")}async signTypedData(e,r){const n=await this._pathFromAddress(e),s=l.v4(),o=c.EthSignRequest.constructETHRequest(t.from(JSON.stringify(r),"utf-8"),c.DataType.typedData,n,this.xfp,s,undefined,e),{r:i,s:a,v:d}=await this.requestSignature(s,o,"Scan with your Keystone",'After your Keystone has signed this data, click on "Scan Keystone" to receive the signature');return"0x"+t.concat([i,a,d]).toString("hex")}async _pathFromAddress(e){if(this.keyringMode===p.hd){const t=o.toChecksumAddress(e);let r=this.indexes[t];if(void 0===r)for(let e=0;e<1e3;e++)if(t===await this.__addressFromIndex(h,e)){r=e;break}if(void 0===r)throw new Error("Unknown address");return`${this.hdPath}/${this.childrenPath.replace("*",r.toString()).replace(/\*/g,"0")}`}{const t=o.toChecksumAddress(e),r=this.paths[t];if(void 0===r)throw new Error("Unknown address");return r}}}m.type=d,r.BaseKeyring=m}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"@keystonehq/metamask-airgapped-keyring>@keystonehq/base-eth-keyring"}],[784,{"@ethereumjs/tx":626,"@ethereumjs/util":636,"@keystonehq/bc-ur-registry-eth":789,buffer:2438,hdkey:5270,rlp:786,uuid:6888},function(){with(this)return function(){"use strict";return function(e,t,r){(function(t){(function(){function n(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(r,"__esModule",{value:!0});var s,o,i=n(e("hdkey")),a=e("@ethereumjs/util"),c=n(e("rlp")),l=e("@ethereumjs/tx"),d=e("@keystonehq/bc-ur-registry-eth"),h=e("uuid");!function(e){e.hd="hd",e.pubkey="pubkey"}(s||(s={})),function(e){e.standard="account.standard",e.ledger_live="account.ledger_live",e.ledger_legacy="account.ledger_legacy"}(o||(o={}));class u{constructor(e){this.version=1,this.getInteraction=()=>{throw new Error("KeystoneError#invalid_extends: method getInteraction not implemented, please extend BaseKeyring by overwriting this method.")},this.type="QR Hardware Wallet Device",this.requestSignature=async(e,t,r,n)=>{const s=await this.getInteraction().requestSignature(t,r,n),o=s.getRequestId(),i=s.getSignature();if(o&&h.stringify(o)!==e)throw new Error("KeystoneError#invalid_data: read signature error: mismatched requestId");return{r:i.slice(0,32),s:i.slice(32,64),v:i.slice(64)}},this.__readCryptoHDKey=e=>{var t,r;const n="m/"+e.getOrigin().getPath(),s=null==(t=e.getOrigin().getSourceFingerprint())?void 0:t.toString("hex"),i=(null==(r=e.getChildren())?void 0:r.getPath())||"0/*",a=e.getName();if(e.getNote()===o.standard?this.keyringAccount=o.standard:e.getNote()===o.ledger_legacy&&(this.keyringAccount=o.ledger_legacy),!s)throw new Error("KeystoneError#invalid_data: invalid crypto-hdkey, cannot get source fingerprint");const c=e.getBip32Key();this.xfp=s,this.xpub=c,this.hdPath=n,this.childrenPath=i,void 0!==a&&""!==a&&(this.name=a),this.initialized=!0},this.__readCryptoAccount=e=>{var t,r;const n=null==(t=e.getMasterFingerprint())?void 0:t.toString("hex");if(!n)throw new Error("KeystoneError#invalid_data: invalid crypto-account, cannot get master fingerprint");this.xfp=n,this.initialized=!0;let s=!1;const i=e.getOutputDescriptors();if(!i||0===i.length)throw new Error("KeystoneError#invalid_data: invalid crypto-account, no crypto output found");if(i.length%5!=0)throw new Error("KeystoneError#invalid_data: only support 5x pubkey accounts for now");return null==(r=e.getOutputDescriptors())||r.forEach((e=>{try{const t=e.getHDKey();if(t){const e=t.getKey(),r="M/"+t.getOrigin().getPath(),n="0x"+a.publicToAddress(e,!0).toString("hex");this.name=t.getName(),t.getNote()===o.ledger_live&&(this.keyringAccount=o.ledger_live),void 0===this.paths[a.toChecksumAddress(n)]&&(s=!0),this.paths[a.toChecksumAddress(n)]=r}}catch(e){throw new Error("KeystoneError#invalid_data: "+e)}})),s},this.getName=()=>this.name,this.setAccountToUnlock=e=>{this.unlockedAccount=parseInt(e,10)},this.__getNormalPage=async e=>{this.page+=e,this.page<=0&&(this.page=1);const t=(this.page-1)*this.perPage,r=t+this.perPage,n=[];for(let e=t;e<r;e++){const t=await this.__addressFromIndex("m",e);n.push({address:t,balance:null,index:e}),this.indexes[a.toChecksumAddress(t)]=e}return n},this.__getLedgerLivePage=async e=>{const t=(this.page+e-1)*this.perPage,r=t+this.perPage,n=[];for(let e=t;e<r;e++){const t=await this.__addressFromIndex("m",e);n.push({address:t,balance:null,index:e})}return this.page+=e,n},this.__addressFromIndex=async(e,t)=>{if(this.keyringMode===s.hd){this.checkKeyring(),this.hdk||(this.hdk=i.fromExtendedKey(this.xpub));const r=this.childrenPath.replace("*",String(t)).replace(/\*/g,"0"),n=this.hdk.derive(`${e}/${r}`),s="0x"+a.publicToAddress(n.publicKey,!0).toString("hex");return a.toChecksumAddress(s)}{const e=Object.keys(this.paths)[t];if(e)return a.toChecksumAddress(e);throw new Error("KeystoneError#pubkey_account.no_expected_account")}},this.page=0,this.perPage=5,this.accounts=[],this.currentAccount=0,this.unlockedAccount=0,this.name="QR Hardware",this.keyringMode=s.hd,this.keyringAccount=o.standard,this.initialized=!1,this.xfp="",this.xpub="",this.hdPath="",this.childrenPath="0/*",this.indexes={},this.paths={},this.deserialize(e)}async readKeyring(){const e=await this.getInteraction().readCryptoHDKeyOrCryptoAccount();this.syncKeyring(e)}syncKeyring(e){e.getRegistryType().getType()===d.extend.RegistryTypes.CRYPTO_HDKEY.getType()?(this.keyringMode=s.hd,this.__readCryptoHDKey(e)):(this.keyringMode=s.pubkey,this.__readCryptoAccount(e))}checkKeyring(){if(!this.xfp||!this.xpub||!this.hdPath)throw new Error("KeystoneError#invalid_keyring: keyring not fulfilled, please call function `readKeyring` firstly")}serialize(){return Promise.resolve({initialized:this.initialized,accounts:this.accounts,currentAccount:this.currentAccount,page:this.page,perPage:this.perPage,keyringAccount:this.keyringAccount,keyringMode:this.keyringMode,name:this.name,version:this.version,xfp:this.xfp,xpub:this.xpub,hdPath:this.hdPath,childrenPath:this.childrenPath,indexes:this.indexes,paths:this.paths})}deserialize(e){e&&(this.accounts=e.accounts,this.currentAccount=e.currentAccount,this.page=e.page,this.perPage=e.perPage,this.name=e.name,this.initialized=e.initialized,this.keyringMode=e.keyringMode||s.hd,this.keyringAccount=e.keyringAccount||o.standard,this.xfp=e.xfp,this.xpub=e.xpub,this.hdPath=e.hdPath,this.indexes=e.indexes,this.paths=e.paths,this.childrenPath=e.childrenPath||"0/*")}setCurrentAccount(e){this.currentAccount=e}getCurrentAccount(){return this.currentAccount}getCurrentAddress(){return this.accounts[this.currentAccount]}async addAccounts(e=1){const t=this.unlockedAccount,r=t+e,n=[];for(let e=t;e<r;e++){const t=await this.__addressFromIndex("m",e);n.push(t),this.page=0,this.unlockedAccount++}return this.accounts=this.accounts.concat(n),this.accounts}getFirstPage(){return this.page=0,this.__getPage(1)}getNextPage(){return this.__getPage(1)}getPreviousPage(){return this.__getPage(-1)}async __getPage(e){return this.initialized||await this.readKeyring(),this.keyringMode===s.hd?this.__getNormalPage(e):this.__getLedgerLivePage(e)}getAccounts(){return Promise.resolve(this.accounts)}removeAccount(e){if(!this.accounts.map((e=>e.toLowerCase())).includes(e.toLowerCase()))throw new Error(`Address ${e} not found in this keyring`);this.accounts=this.accounts.filter((t=>t.toLowerCase()!==e.toLowerCase()))}async signTransaction(e,r){const n=0===r.type?d.DataType.transaction:d.DataType.typedTransaction;let s;s=0===r.type?t.from(c.encode(r.getMessageToSign(!1))):r.getMessageToSign(!1);const o=await this._pathFromAddress(e),i=r.common.chainId(),a=h.v4(),u=d.EthSignRequest.constructETHRequest(s,n,o,this.xfp,a,i),{r:p,s:g,v:m}=await this.requestSignature(a,u,"Scan with your Keystone",'After your Keystone has signed the transaction, click on "Scan Keystone" to receive the signature');return l.TransactionFactory.fromTxData({...r.toJSON(),type:r.type,r:p,s:g,v:m},{common:r.common})}signMessage(e,t){return this.signPersonalMessage(e,t)}async signPersonalMessage(e,r){const n=a.stripHexPrefix(r),s=await this._pathFromAddress(e),o=h.v4(),i=d.EthSignRequest.constructETHRequest(t.from(n,"hex"),d.DataType.personalMessage,s,this.xfp,o,void 0,e),{r:c,s:l,v:u}=await this.requestSignature(o,i,"Scan with your Keystone",'After your Keystone has signed this message, click on "Scan Keystone" to receive the signature');return"0x"+t.concat([c,l,u]).toString("hex")}async signTypedData(e,r){const n=await this._pathFromAddress(e),s=h.v4(),o=d.EthSignRequest.constructETHRequest(t.from(JSON.stringify(r),"utf-8"),d.DataType.typedData,n,this.xfp,s,void 0,e),{r:i,s:a,v:c}=await this.requestSignature(s,o,"Scan with your Keystone",'After your Keystone has signed this data, click on "Scan Keystone" to receive the signature');return"0x"+t.concat([i,a,c]).toString("hex")}async _pathFromAddress(e){if(this.keyringMode===s.hd){const t=a.toChecksumAddress(e);let r=this.indexes[t];if(void 0===r)for(let e=0;e<1e3;e++)if(t===await this.__addressFromIndex("m",e)){r=e;break}if(void 0===r)throw new Error("Unknown address");return`${this.hdPath}/${this.childrenPath.replace("*",r.toString()).replace(/\*/g,"0")}`}{const t=a.toChecksumAddress(e),r=this.paths[t];if(void 0===r)throw new Error("Unknown address");return r}}}u.type="QR Hardware Wallet Device",r.BaseKeyring=u}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"@keystonehq/metamask-airgapped-keyring>@keystonehq/base-eth-keyring"}],[785,{"./base-eth-keyring.cjs.development.js":783,"./base-eth-keyring.cjs.production.min.js":784},function(){with(this)return function(){"use strict";return function(e,t,r){t.exports=e("./base-eth-keyring.cjs.production.min.js")}}},{package:"@keystonehq/metamask-airgapped-keyring>@keystonehq/base-eth-keyring"}],[786,{},function(){with(this)return function(){"use strict";return function(e,t,r){function n(e){if(Array.isArray(e)){const t=[];for(let r=0;r<e.length;r++)t.push(n(e[r]));const r=p(...t);return p(i(r.length,192),r)}const t=y(e);return 1===t.length&&t[0]<128?t:p(i(t.length,128),t)}function s(e,t,r){if(r>e.length)throw new Error("invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds");return e.slice(t,r)}function o(e){if(0===e[0])throw new Error("invalid RLP: extra zeros");return h(d(e))}function i(e,t){if(e<56)return Uint8Array.from([e+t]);const r=m(e),n=m(t+55+r.length/2);return Uint8Array.from(u(n+r))}function a(e,t=!1){if(!e||0===e.length)return Uint8Array.from([]);const r=c(y(e));if(t)return r;if(0!==r.remainder.length)throw new Error("invalid RLP: remainder must be zero");return r.data}function c(e){let t,r,n,i,a;const l=[],d=e[0];if(d<=127)return{data:e.slice(0,1),remainder:e.slice(1)};if(d<=183){if(t=d-127,n=128===d?Uint8Array.from([]):s(e,1,t),2===t&&n[0]<128)throw new Error("invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed");return{data:n,remainder:e.slice(t)}}if(d<=191){if(r=d-182,e.length-1<r)throw new Error("invalid RLP: not enough bytes for string length");if(t=o(s(e,1,r)),t<=55)throw new Error("invalid RLP: expected string length to be greater than 55");return n=s(e,r,t+r),{data:n,remainder:e.slice(t+r)}}if(d<=247){for(t=d-191,i=s(e,1,t);i.length;)a=c(i),l.push(a.data),i=a.remainder;return{data:l,remainder:e.slice(t)}}{if(r=d-246,t=o(s(e,1,r)),t<56)throw new Error("invalid RLP: encoded list too short");const n=r+t;if(n>e.length)throw new Error("invalid RLP: total length is larger than the data");for(i=s(e,r,n);i.length;)a=c(i),l.push(a.data),i=a.remainder;return{data:l,remainder:e.slice(n)}}}Object.defineProperty(r,"__esModule",{value:!0}),r.utils=r.decode=r.encode=void 0,r.encode=n,r.decode=a;const l=Array.from({length:256},((e,t)=>t.toString(16).padStart(2,"0")));function d(e){let t="";for(let r=0;r<e.length;r++)t+=l[e[r]];return t}function h(e){const t=Number.parseInt(e,16);if(Number.isNaN(t))throw new Error("Invalid byte sequence");return t}function u(e){if("string"!=typeof e)throw new TypeError("hexToBytes: expected string, got "+typeof e);if(e.length%2)throw new Error("hexToBytes: received invalid unpadded hex");const t=new Uint8Array(e.length/2);for(let r=0;r<t.length;r++){const n=2*r;t[r]=h(e.slice(n,n+2))}return t}function p(...e){if(1===e.length)return e[0];const t=e.reduce(((e,t)=>e+t.length),0),r=new Uint8Array(t);for(let t=0,n=0;t<e.length;t++){const s=e[t];r.set(s,n),n+=s.length}return r}function g(e){return(new TextEncoder).encode(e)}function m(e){if(e<0)throw new Error("Invalid integer as argument, must be unsigned!");const t=e.toString(16);return t.length%2?`0${t}`:t}function f(e){return e.length>=2&&"0"===e[0]&&"x"===e[1]}function y(e){if(e instanceof Uint8Array)return e;if("string"==typeof e)return f(e)?u((t="string"!=typeof(r=e)?r:f(r)?r.slice(2):r).length%2?`0${t}`:t):g(e);var t,r;if("number"==typeof e||"bigint"==typeof e)return e?u(m(e)):Uint8Array.from([]);if(null===e||e===undefined)return Uint8Array.from([]);throw new Error("toBytes: received unsupported type "+typeof e)}r.utils={bytesToHex:d,concatBytes:p,hexToBytes:u,utf8ToBytes:g};const C={encode:n,decode:a};r.default=C}}},{package:"@keystonehq/metamask-airgapped-keyring>@keystonehq/base-eth-keyring>rlp"}],[79,{"../../../../../shared/constants/app":7055,"eth-rpc-errors":2821},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("eth-rpc-errors"),s=e("../../../../../shared/constants/app");var o={methodNames:[s.MESSAGE_TYPE.ETH_REQUEST_ACCOUNTS],implementation:async function(e,t,r,o,{origin:a,getAccounts:c,getUnlockPromise:l,hasPermission:d,requestAccountsPermission:h}){if(i.has(a))return t.error=n.ethErrors.rpc.resourceUnavailable(`Already processing ${s.MESSAGE_TYPE.ETH_REQUEST_ACCOUNTS}. Please wait.`),o();if(d(s.MESSAGE_TYPE.ETH_ACCOUNTS)){try{i.add(a),await l(!0),t.result=await c(),o()}catch(e){o(e)}finally{i.delete(a)}return undefined}try{await h()}catch(e){return t.error=e,o()}const u=await c();u.length>0?t.result=u:t.error=n.ethErrors.rpc.internal("Accounts unexpectedly unavailable. Please report this bug.");return o()},hookNames:{origin:!0,getAccounts:!0,getUnlockPromise:!0,hasPermission:!0,requestAccountsPermission:!0}};r.default=o;const i=new Set}}},{package:"$root$"}],[8,{"../../../shared/constants/alerts":7054,"@metamask/obs-store":1471},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("@metamask/obs-store"),s=e("../../../shared/constants/alerts");const o={alertEnabledness:s.TOGGLEABLE_ALERT_TYPES.reduce(((e,t)=>(e[t]=!0,e)),{}),unconnectedAccountAlertShownOrigins:{},web3ShimUsageOrigins:{}};r.default=class{constructor(e={}){const{initState:t={},preferencesStore:r}=e,s={...o,alertEnabledness:{...o.alertEnabledness,...t.alertEnabledness}};this.store=new n.ObservableStore(s),this.selectedAddress=r.getState().selectedAddress,r.subscribe((({selectedAddress:e})=>{this.store.getState().unconnectedAccountAlertShownOrigins&&this.selectedAddress!==e&&(this.selectedAddress=e,this.store.updateState({unconnectedAccountAlertShownOrigins:{}}))}))}setAlertEnabledness(e,t){let{alertEnabledness:r}=this.store.getState();r={...r},r[e]=t,this.store.updateState({alertEnabledness:r})}setUnconnectedAccountAlertShown(e){let{unconnectedAccountAlertShownOrigins:t}=this.store.getState();t={...t},t[e]=!0,this.store.updateState({unconnectedAccountAlertShownOrigins:t})}getWeb3ShimUsageState(e){return this.store.getState().web3ShimUsageOrigins[e]}setWeb3ShimUsageRecorded(e){this._setWeb3ShimUsageState(e,s.WEB3_SHIM_USAGE_ALERT_STATES.RECORDED)}setWeb3ShimUsageAlertDismissed(e){this._setWeb3ShimUsageState(e,s.WEB3_SHIM_USAGE_ALERT_STATES.DISMISSED)}_setWeb3ShimUsageState(e,t){let{web3ShimUsageOrigins:r}=this.store.getState();r={...r},r[e]=t,this.store.updateState({web3ShimUsageOrigins:r})}}}}},{package:"$root$"}],[80,{"../../../../../shared/constants/app":7055,"eth-rpc-errors":2821},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("eth-rpc-errors");var s={methodNames:[e("../../../../../shared/constants/app").MESSAGE_TYPE.SEND_METADATA],implementation:function(e,t,r,s,{addSubjectMetadata:o,subjectType:i}){const{origin:a,params:c}=e;if(!c||"object"!=typeof c||Array.isArray(c))return s(n.ethErrors.rpc.invalidParams({data:c}));{const{icon:e=null,name:t=null,...r}=c;o({...r,iconUrl:e,name:t,subjectType:i,origin:a})}return t.result=!0,s()},hookNames:{addSubjectMetadata:!0,subjectType:!0}};r.default=s}}},{package:"$root$"}],[81,{"../../../../../shared/constants/app":7055,"../../../../../shared/constants/network":7060,"../../../../../shared/modules/network.utils":7083,"eth-rpc-errors":2821,lodash:6046},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("eth-rpc-errors"),s=e("lodash"),o=e("../../../../../shared/constants/app"),i=e("../../../../../shared/constants/network"),a=e("../../../../../shared/modules/network.utils");var c={methodNames:[o.MESSAGE_TYPE.SWITCH_ETHEREUM_CHAIN],implementation:async function(e,t,r,c,{getCurrentChainId:l,findCustomRpcBy:d,setProviderType:h,updateRpcTarget:u,requestUserApproval:p}){var g;if(null===(g=e.params)||void 0===g||!g[0]||"object"!=typeof e.params[0])return c(n.ethErrors.rpc.invalidParams({message:`Expected single, object parameter. Received:\n${JSON.stringify(e.params)}`}));const{origin:m}=e,{chainId:f}=e.params[0],y=Object.keys((0,s.omit)(e.params[0],["chainId"]));if(y.length>0)return c(n.ethErrors.rpc.invalidParams({message:`Received unexpected keys on object parameter. Unsupported keys:\n${y}`}));const C="string"==typeof f&&f.toLowerCase();if(!(0,a.isPrefixedFormattedHexString)(C))return c(n.ethErrors.rpc.invalidParams({message:`Expected 0x-prefixed, unpadded, non-zero hexadecimal string 'chainId'. Received:\n${f}`}));if(!(0,a.isSafeChainId)(parseInt(C,16)))return c(n.ethErrors.rpc.invalidParams({message:`Invalid chain ID "${C}": numerical value greater than max safe value. Received:\n${f}`}));const b=function(e,t){if(e in i.CHAIN_ID_TO_TYPE_MAP)return{chainId:e,ticker:i.CURRENCY_SYMBOLS.ETH,nickname:i.NETWORK_TO_NAME_MAP[e],rpcUrl:i.CHAIN_ID_TO_RPC_URL_MAP[e],type:i.CHAIN_ID_TO_TYPE_MAP[e]};return t({chainId:e})}(C,d);if(b){if(l()===C)return t.result=null,c();try{const e=await p({origin:m,type:o.MESSAGE_TYPE.SWITCH_ETHEREUM_CHAIN,requestData:b});f in i.CHAIN_ID_TO_TYPE_MAP?h(e.type):await u(e),t.result=null}catch(e){return c(e)}return c()}return c(n.ethErrors.provider.custom({code:4902,message:`Unrecognized chain ID "${f}". Try adding the chain using ${o.MESSAGE_TYPE.ADD_ETHEREUM_CHAIN} first.`}))},hookNames:{getCurrentChainId:!0,findCustomRpcBy:!0,setProviderType:!0,updateRpcTarget:!0,requestUserApproval:!0}};r.default=c}}},{package:"$root$"}],[813,{"./metamask-airgapped-keyring.cjs.development.js":814,"./metamask-airgapped-keyring.cjs.production.min.js":815},function(){with(this)return function(){"use strict";return function(e,t,r){t.exports=e("./metamask-airgapped-keyring.cjs.production.min.js")}}},{package:"@keystonehq/metamask-airgapped-keyring"}],[814,{"@ethereumjs/tx":626,"@keystonehq/base-eth-keyring":785,"@keystonehq/bc-ur-registry-eth":789,"@metamask/obs-store":820,buffer:2438,events:2439,rlp:6613,uuid:6888},function(){with(this)return function(){"use strict";return function(e,t,r){(function(t){(function(){Object.defineProperty(r,"__esModule",{value:!0});var n,s=e("@keystonehq/base-eth-keyring"),o=e("events"),i=e("@metamask/obs-store"),a=e("@keystonehq/bc-ur-registry-eth"),c=e("uuid"),l=e("@ethereumjs/tx"),d=(n=e("rlp"))&&"object"==typeof n&&"default"in n?n.default:n;class h extends o.EventEmitter{constructor(){if(super(),this.cleanSyncListeners=()=>{this.removeAllListeners("keystone-sync_success-hdkey"),this.removeAllListeners("keystone-sync_success-account"),this.removeAllListeners("keystone-sync_cancel")},this.cleanSignListeners=e=>{this.removeAllListeners(`${e}-signed`),this.removeAllListeners(`${e}-canceled`)},this.readCryptoHDKeyOrCryptoAccount=()=>new Promise(((e,r)=>{this.memStore.updateState({sync:{reading:!0}}),this.on("keystone-sync_success-hdkey",(r=>{const n=a.CryptoHDKey.fromCBOR(t.from(r,"hex"));this.resetState(),e(n)})),this.on("keystone-sync_success-account",(r=>{const n=a.CryptoAccount.fromCBOR(t.from(r,"hex"));this.resetState(),e(n)})),this.on("keystone-sync_cancel",(()=>{this.resetState(),r(new Error("KeystoneError#sync_cancel. Sync process canceled, please retry"))}))})),this.submitCryptoHDKey=e=>{this.emit("keystone-sync_success-hdkey",e)},this.submitCryptoAccount=e=>{this.emit("keystone-sync_success-account",e)},this.cancelSync=()=>{this.emit("keystone-sync_cancel")},this.requestSignature=(e,r,n)=>new Promise(((s,o)=>{const i=e.toUR(),l=e.getRequestId(),d=c.stringify(l),h={requestId:d,payload:{type:i.type,cbor:i.cbor.toString("hex")},title:r,description:n};this.memStore.updateState({sign:{request:h}}),this.once(`${d}-signed`,(e=>{const r=a.ETHSignature.fromCBOR(t.from(e,"hex"));this.resetState(),s(r)})),this.once(`${d}-canceled`,(()=>{this.resetState(),o(new Error("KeystoneError#Tx_canceled. Signing canceled, please retry"))}))})),this.submitSignature=(e,t)=>{this.emit(`${e}-signed`,t)},this.cancelRequestSignature=()=>{const e=this.memStore.getState().sign.request;if(e){const{requestId:t}=e;this.memStore.updateState({sign:{}}),this.emit(`${t}-canceled`)}},this.reset=()=>{this.cleanSyncListeners();const e=this.memStore.getState().sign.request;if(e){const{requestId:t}=e;this.cleanSignListeners(t)}this.resetState()},this.resetState=()=>{this.memStore.updateState({sync:{reading:!1},sign:{}})},h.instance)return h.instance;this.memStore=new i.ObservableStore({sync:{reading:!1},sign:{},_version:1}),h.instance=this}}class u extends s.BaseKeyring{constructor(e){if(super(e),this.getInteraction=()=>new h,this.resetStore=()=>{this.getInteraction().reset()},this.getMemStore=()=>this.getInteraction().memStore,this.removeAccount=e=>{if(!this.accounts.map((e=>e.toLowerCase())).includes(e.toLowerCase()))throw new Error(`Address ${e} not found in this keyring`);this.accounts=this.accounts.filter((t=>t.toLowerCase()!==e.toLowerCase()))},this.forgetDevice=()=>{this.page=0,this.perPage=5,this.accounts=[],this.currentAccount=0,this.name="QR Hardware",this.initialized=!1,this.xfp="",this.xpub="",this.hdPath="",this.indexes={},this.hdk=undefined,this.paths={}},this.submitCryptoHDKey=this.getInteraction().submitCryptoHDKey,this.submitCryptoAccount=this.getInteraction().submitCryptoAccount,this.submitSignature=this.getInteraction().submitSignature,this.cancelSync=this.getInteraction().cancelSync,this.cancelSignRequest=this.getInteraction().cancelRequestSignature,u.instance)return u.instance.deserialize(e),u.instance;u.instance=this}async signTransaction(e,t){const r=0===t.type?a.DataType.transaction:a.DataType.typedTransaction;let n;n=0===t.type?d.encode(t.getMessageToSign(!1)):t.getMessageToSign(!1);const s=await this._pathFromAddress(e),o=t.common.chainId(),i=c.v4(),h=a.EthSignRequest.constructETHRequest(n,r,s,this.xfp,i,o,e),{r:u,s:p,v:g}=await this.requestSignature(i,h,"Scan with your Keystone",'After your Keystone has signed the transaction, click on "Scan Keystone" to receive the signature'),m=t.toJSON();m.v=g,m.s=p,m.r=u,m.type=t.type;return l.TransactionFactory.fromTxData(m,{common:t.common})}}u.type=s.BaseKeyring.type,r.MetaMaskKeyring=u}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"@keystonehq/metamask-airgapped-keyring"}],[815,{"@ethereumjs/tx":626,"@keystonehq/base-eth-keyring":785,"@keystonehq/bc-ur-registry-eth":789,"@metamask/obs-store":820,buffer:2438,events:2439,rlp:6613,uuid:6888},function(){with(this)return function(){"use strict";return function(e,t,r){(function(t){(function(){Object.defineProperty(r,"__esModule",{value:!0});var n,s=e("@keystonehq/base-eth-keyring"),o=e("events"),i=e("@metamask/obs-store"),a=e("@keystonehq/bc-ur-registry-eth"),c=e("uuid"),l=e("@ethereumjs/tx"),d=(n=e("rlp"))&&"object"==typeof n&&"default"in n?n.default:n;class h extends o.EventEmitter{constructor(){if(super(),this.cleanSyncListeners=()=>{this.removeAllListeners("keystone-sync_success-hdkey"),this.removeAllListeners("keystone-sync_success-account"),this.removeAllListeners("keystone-sync_cancel")},this.cleanSignListeners=e=>{this.removeAllListeners(e+"-signed"),this.removeAllListeners(e+"-canceled")},this.readCryptoHDKeyOrCryptoAccount=()=>new Promise(((e,r)=>{this.memStore.updateState({sync:{reading:!0}}),this.on("keystone-sync_success-hdkey",(r=>{const n=a.CryptoHDKey.fromCBOR(t.from(r,"hex"));this.resetState(),e(n)})),this.on("keystone-sync_success-account",(r=>{const n=a.CryptoAccount.fromCBOR(t.from(r,"hex"));this.resetState(),e(n)})),this.on("keystone-sync_cancel",(()=>{this.resetState(),r(new Error("KeystoneError#sync_cancel. Sync process canceled, please retry"))}))})),this.submitCryptoHDKey=e=>{this.emit("keystone-sync_success-hdkey",e)},this.submitCryptoAccount=e=>{this.emit("keystone-sync_success-account",e)},this.cancelSync=()=>{this.emit("keystone-sync_cancel")},this.requestSignature=(e,r,n)=>new Promise(((s,o)=>{const i=e.toUR(),l=e.getRequestId(),d=c.stringify(l),h={requestId:d,payload:{type:i.type,cbor:i.cbor.toString("hex")},title:r,description:n};this.memStore.updateState({sign:{request:h}}),this.once(d+"-signed",(e=>{const r=a.ETHSignature.fromCBOR(t.from(e,"hex"));this.resetState(),s(r)})),this.once(d+"-canceled",(()=>{this.resetState(),o(new Error("KeystoneError#Tx_canceled. Signing canceled, please retry"))}))})),this.submitSignature=(e,t)=>{this.emit(e+"-signed",t)},this.cancelRequestSignature=()=>{const e=this.memStore.getState().sign.request;if(e){const{requestId:t}=e;this.memStore.updateState({sign:{}}),this.emit(t+"-canceled")}},this.reset=()=>{this.cleanSyncListeners();const e=this.memStore.getState().sign.request;if(e){const{requestId:t}=e;this.cleanSignListeners(t)}this.resetState()},this.resetState=()=>{this.memStore.updateState({sync:{reading:!1},sign:{}})},h.instance)return h.instance;this.memStore=new i.ObservableStore({sync:{reading:!1},sign:{},_version:1}),h.instance=this}}class u extends s.BaseKeyring{constructor(e){if(super(e),this.getInteraction=()=>new h,this.resetStore=()=>{this.getInteraction().reset()},this.getMemStore=()=>this.getInteraction().memStore,this.removeAccount=e=>{if(!this.accounts.map((e=>e.toLowerCase())).includes(e.toLowerCase()))throw new Error(`Address ${e} not found in this keyring`);this.accounts=this.accounts.filter((t=>t.toLowerCase()!==e.toLowerCase()))},this.forgetDevice=()=>{this.page=0,this.perPage=5,this.accounts=[],this.currentAccount=0,this.name="QR Hardware",this.initialized=!1,this.xfp="",this.xpub="",this.hdPath="",this.indexes={},this.hdk=void 0,this.paths={}},this.submitCryptoHDKey=this.getInteraction().submitCryptoHDKey,this.submitCryptoAccount=this.getInteraction().submitCryptoAccount,this.submitSignature=this.getInteraction().submitSignature,this.cancelSync=this.getInteraction().cancelSync,this.cancelSignRequest=this.getInteraction().cancelRequestSignature,u.instance)return u.instance.deserialize(e),u.instance;u.instance=this}async signTransaction(e,t){const r=0===t.type?a.DataType.transaction:a.DataType.typedTransaction;let n;n=0===t.type?d.encode(t.getMessageToSign(!1)):t.getMessageToSign(!1);const s=await this._pathFromAddress(e),o=t.common.chainId(),i=c.v4(),h=a.EthSignRequest.constructETHRequest(n,r,s,this.xfp,i,o,e),{r:u,s:p,v:g}=await this.requestSignature(i,h,"Scan with your Keystone",'After your Keystone has signed the transaction, click on "Scan Keystone" to receive the signature'),m=t.toJSON();return m.v=g,m.s=p,m.r=u,m.type=t.type,l.TransactionFactory.fromTxData(m,{common:t.common})}}u.type=s.BaseKeyring.type,r.MetaMaskKeyring=u}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"@keystonehq/metamask-airgapped-keyring"}],[816,{"./ObservableStore":818},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.ComposedStore=void 0;const n=e("./ObservableStore");class s extends n.ObservableStore{constructor(e){super({}),this._children=e||{},Object.keys(this._children).forEach((e=>{const t=this._children[e];this._addChild(e,t)}))}_addChild(e,t){const r=t=>{const r=this.getState();r[e]=t,this.putState(r)};t.subscribe(r),r(t.getState())}}r.ComposedStore=s}}},{package:"@keystonehq/metamask-airgapped-keyring>@metamask/obs-store"}],[817,{"./ObservableStore":818},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.MergedStore=void 0;const n=e("./ObservableStore");class s extends n.ObservableStore{constructor(e=[]){super({}),this._children=e,e.forEach((e=>this._addChild(e))),this._updateWholeState()}_addChild(e){e.subscribe((()=>this._updateWholeState()))}_updateWholeState(){const e=this._children.map((e=>e.getState())),t=Object.assign({},...e);this.putState(t)}}r.MergedStore=s}}},{package:"@keystonehq/metamask-airgapped-keyring>@metamask/obs-store"}],[818,{"@metamask/safe-event-emitter":1574},function(){with(this)return function(){"use strict";return function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0}),r.ObservableStore=void 0;const s=n(e("@metamask/safe-event-emitter"));class o extends s.default{constructor(e){super(),this._state=e||{}}getState(){return this._getState()}putState(e){this._putState(e),this.emit("update",e)}updateState(e){if(e&&"object"==typeof e){const t=this.getState();this.putState(Object.assign(Object.assign({},t),e))}else this.putState(e)}subscribe(e){this.on("update",e)}unsubscribe(e){this.removeListener("update",e)}_getState(){return this._state}_putState(e){this._state=e}}r.ObservableStore=o}}},{package:"@keystonehq/metamask-airgapped-keyring>@metamask/obs-store"}],[819,{stream:2441},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.storeAsStream=void 0;const n=e("stream");class s extends n.Duplex{constructor(e){super({objectMode:!0}),this.resume(),this.handler=e=>this.push(e),this.obsStore=e,this.obsStore.subscribe(this.handler)}pipe(e,t){const r=super.pipe(e,t);return e.write(this.obsStore.getState()),r}_write(e,t,r){this.obsStore.putState(e),r()}_read(e){return undefined}_destroy(e,t){this.obsStore.unsubscribe(this.handler),super._destroy(e,t)}}r.storeAsStream=function(e){return new s(e)}}}},{package:"@keystonehq/metamask-airgapped-keyring>@metamask/obs-store"}],[82,{"../../../../../shared/constants/app":7055,"eth-rpc-errors":2821},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("eth-rpc-errors"),s=e("../../../../../shared/constants/app");var o={methodNames:[s.MESSAGE_TYPE.WATCH_ASSET,s.MESSAGE_TYPE.WATCH_ASSET_LEGACY],implementation:async function(e,t,r,s,{handleWatchAssetRequest:o}){try{const{options:r,type:n}=e.params,i=await o(r,n);return await i.result,t.result=!0,s()}catch(e){return"User rejected to watch the asset."===e.message?s(n.ethErrors.provider.userRejectedRequest()):s(e)}},hookNames:{handleWatchAssetRequest:!0}};r.default=o}}},{package:"$root$"}],[820,{"./ComposedStore":816,"./MergedStore":817,"./ObservableStore":818,"./asStream":819,"./transform":821},function(){with(this)return function(){"use strict";return function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){n===undefined&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===undefined&&(n=r),e[n]=t[r]}),s=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(r,"__esModule",{value:!0}),s(e("./asStream"),r),s(e("./ComposedStore"),r),s(e("./MergedStore"),r),s(e("./ObservableStore"),r),s(e("./transform"),r)}}},{package:"@keystonehq/metamask-airgapped-keyring>@metamask/obs-store"}],[821,{through2:822},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.storeTransformStream=void 0;const n=e("through2");r.storeTransformStream=function(e){return n.obj(((t,r,n)=>{try{return n(null,e(t)),undefined}catch(e){return n(e),undefined}}))}}}},{package:"@keystonehq/metamask-airgapped-keyring>@metamask/obs-store"}],[822,{_process:6295,"readable-stream":6576,util:2444,xtend:7041},function(){with(this)return function(){"use strict";return function(e,t,r){(function(r){(function(){var n=e("readable-stream").Transform,s=e("util").inherits,o=e("xtend");function i(e){n.call(this,e),this._destroyed=!1}function a(e,t,r){r(null,e)}function c(e){return function(t,r,n){return"function"==typeof t&&(n=r,r=t,t={}),"function"!=typeof r&&(r=a),"function"!=typeof n&&(n=null),e(t,r,n)}}s(i,n),i.prototype.destroy=function(e){if(!this._destroyed){this._destroyed=!0;var t=this;r.nextTick((function(){e&&t.emit("error",e),t.emit("close")}))}},t.exports=c((function(e,t,r){var n=new i(e);return n._transform=t,r&&(n._flush=r),n})),t.exports.ctor=c((function(e,t,r){function n(t){if(!(this instanceof n))return new n(t);this.options=o(e,t),i.call(this,this.options)}return s(n,i),n.prototype._transform=t,r&&(n.prototype._flush=r),n})),t.exports.obj=c((function(e,t,r){var n=new i(o({objectMode:!0,highWaterMark:16},e));return n._transform=t,r&&(n._flush=r),n}))}).call(this)}).call(this,e("_process"))}}},{package:"@keystonehq/metamask-airgapped-keyring>@metamask/obs-store>through2"}],[83,{"./createMethodMiddleware":73},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});var n=e("./createMethodMiddleware");Object.keys(n).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in r&&r[e]===n[e]||Object.defineProperty(r,e,{enumerable:!0,get:function(){return n[e]}}))}))}}},{package:"$root$"}],[84,{"eth-keyring-controller":2799,loglevel:6059},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=o(e("eth-keyring-controller")),s=o(e("loglevel"));function o(e){return e&&e.__esModule?e:{default:e}}var i={async verifyAccounts(e,t){if(!e||e.length<1)throw new Error("No created accounts defined.");const r=new(new n.default({}).getKeyringClassForType("HD Key Tree"))({mnemonic:t,numberOfAccounts:e.length}),o=await r.getAccounts();if(s.default.debug(`Created accounts: ${JSON.stringify(e)}`),s.default.debug(`Restored accounts: ${JSON.stringify(o)}`),o.length!==e.length)throw new Error("Wrong number of accounts");for(let t=0;t<o.length;t++)if(o[t].toLowerCase()!==e[t].toLowerCase())throw new Error(`Not identical accounts! Original: ${e[t]}, Restored: ${o[t]}`)}};r.default=i}}},{package:"$root$"}],[85,{"../../../shared/constants/time":7065,_process:6295,"analytics-node":2019},function(){with(this)return function(){"use strict";return function(e,t,r){(function(t){(function(){Object.defineProperty(r,"__esModule",{value:!0}),r.segment=r.createSegmentMock=void 0;var n,s,o,i=(n=e("analytics-node"))&&n.__esModule?n:{default:n},a=e("../../../shared/constants/time");const c=null!==(s="2RVxP95LPTEWYXfi8wioLD6NuVzdhnr2")?s:null,l=null!==(o=t.env.SEGMENT_HOST)&&void 0!==o?o:null,d=5*a.SECOND,h=(e=1)=>{const t={queue:[],flush(){t.queue.forEach((([e,t])=>{t()})),t.queue=[]},track(r,n=(()=>undefined)){t.queue.push([r,n]),t.queue.length>=e&&t.flush()},page(){},identify(){}};return t};r.createSegmentMock=h;const u=c?new i.default(c,{host:l,flushAt:1,flushInterval:d}):h(1);r.segment=u}).call(this)}).call(this,e("_process"))}}},{package:"$root$"}],[89,{"../../../shared/constants/app":7055,"../../../shared/constants/metametrics":7059,"../../../shared/modules/hexstring-utils":7081,"../../../shared/modules/random-id":7085,"../metamask-controller":91,"@metamask/obs-store":1471,assert:2066,"eth-rpc-errors":2821,"eth-sig-util":2823,events:2439,jsonschema:5639,loglevel:6059},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=m(e("events")),s=e("assert"),o=e("@metamask/obs-store"),i=e("eth-rpc-errors"),a=e("eth-sig-util"),c=m(e("loglevel")),l=m(e("jsonschema")),d=e("../../../shared/constants/app"),h=e("../metamask-controller"),u=m(e("../../../shared/modules/random-id")),p=e("../../../shared/constants/metametrics"),g=e("../../../shared/modules/hexstring-utils");function m(e){return e&&e.__esModule?e:{default:e}}class f extends n.default{constructor({getCurrentChainId:e,metricsEvent:t}){super(),this._getCurrentChainId=e,this.memStore=new o.ObservableStore({unapprovedTypedMessages:{},unapprovedTypedMessagesCount:0}),this.messages=[],this.metricsEvent=t}get unapprovedTypedMessagesCount(){return Object.keys(this.getUnapprovedMsgs()).length}getUnapprovedMsgs(){return this.messages.filter((e=>"unapproved"===e.status)).reduce(((e,t)=>(e[t.id]=t,e)),{})}addUnapprovedMessageAsync(e,t,r){return new Promise(((n,s)=>{const o=this.addUnapprovedMessage(e,t,r);this.once(`${o}:finished`,(t=>{switch(t.status){case"signed":return n(t.rawSig);case"rejected":return s(i.ethErrors.provider.userRejectedRequest("MetaMask Message Signature: User denied message signature."));case"errored":return s(new Error(`MetaMask Message Signature: ${t.error}`));default:return s(new Error(`MetaMask Message Signature: Unknown problem: ${JSON.stringify(e)}`))}}))}))}addUnapprovedMessage(e,t,r){e.version=r,t&&(e.origin=t.origin),this.validateParams(e),c.default.debug(`TypedMessageManager addUnapprovedMessage: ${JSON.stringify(e)}`);const n=(new Date).getTime(),s=(0,u.default)(),o={id:s,msgParams:e,time:n,status:"unapproved",type:d.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA};return this.addMsg(o),this.emit("update"),s}validateParams(e){switch(s.strict.ok(e&&"object"==typeof e,"Params must be an object."),s.strict.ok("data"in e,'Params must include a "data" field.'),s.strict.ok("from"in e,'Params must include a "from" field.'),s.strict.ok("string"==typeof e.from&&(0,g.isValidHexAddress)(e.from,{allowNonPrefixed:!1}),'"from" field must be a valid, lowercase, hexadecimal Ethereum address string.'),e.version){case"V1":s.strict.ok(Array.isArray(e.data),'"params.data" must be an array.'),s.strict.doesNotThrow((()=>{(0,a.typedSignatureHash)(e.data)}),"Signing data must be valid EIP-712 typed data.");break;case"V3":case"V4":{let t;s.strict.equal(typeof e.data,"string",'"params.data" must be a string.'),s.strict.doesNotThrow((()=>{t=JSON.parse(e.data)}),'"data" must be a valid JSON string.');const r=l.default.validate(t,a.TYPED_MESSAGE_SCHEMA);if(s.strict.ok(t.primaryType in t.types,`Primary type of "${t.primaryType}" has no type definition.`),0!==r.errors.length)throw i.ethErrors.rpc.invalidParams({message:"Signing data must conform to EIP-712 schema. See https://git.io/fNtcx.",data:r.errors.map((e=>e.message.toString()))});let{chainId:n}=t.domain;if(n){const e=parseInt(this._getCurrentChainId(),16);s.strict.ok(!Number.isNaN(e),`Cannot sign messages for chainId "${n}", because MetaMask is switching networks.`),"string"==typeof n&&(n=parseInt(n,n.startsWith("0x")?16:10)),s.strict.equal(n,e,`Provided chainId "${n}" must match the active chainId "${e}"`)}break}default:s.strict.fail(`Unknown typed data version "${e.version}"`)}}addMsg(e){this.messages.push(e),this._saveMsgList()}getMsg(e){return this.messages.find((t=>t.id===e))}approveMessage(e){return this.setMsgStatusApproved(e.metamaskId),this.prepMsgForSigning(e)}setMsgStatusApproved(e){this._setMsgStatus(e,"approved")}setMsgStatusSigned(e,t){const r=this.getMsg(e);r.rawSig=t,this._updateMsg(r),this._setMsgStatus(e,"signed")}prepMsgForSigning(e){return delete e.metamaskId,delete e.version,Promise.resolve(e)}rejectMsg(e,t=undefined){if(t){const r=this.getMsg(e);this.metricsEvent({event:t,category:p.EVENT.CATEGORIES.TRANSACTIONS,properties:{action:"Sign Request",version:r.msgParams.version,type:r.type}})}this._setMsgStatus(e,"rejected")}errorMessage(e,t){const r=this.getMsg(e);r.error=t,this._updateMsg(r),this._setMsgStatus(e,"errored")}clearUnapproved(){this.messages=this.messages.filter((e=>"unapproved"!==e.status)),this._saveMsgList()}_setMsgStatus(e,t){const r=this.getMsg(e);if(!r)throw new Error(`TypedMessageManager - Message not found for id: "${e}".`);r.status=t,this._updateMsg(r),this.emit(`${e}:${t}`,r),"rejected"!==t&&"signed"!==t&&"errored"!==t||this.emit(`${e}:finished`,r)}_updateMsg(e){const t=this.messages.findIndex((t=>t.id===e.id));-1!==t&&(this.messages[t]=e),this._saveMsgList()}_saveMsgList(){const e=this.getUnapprovedMsgs(),t=Object.keys(e).length;this.memStore.updateState({unapprovedTypedMessages:e,unapprovedTypedMessagesCount:t}),this.emit(h.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE)}}r.default=f}}},{package:"$root$"}],[9,{"../../../shared/constants/alarms":7053,"../../../shared/constants/time":7065,"../../../shared/modules/mv3.utils":7082,"../metamask-controller":91,"@metamask/obs-store":1471,events:2439},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,s=(n=e("events"))&&n.__esModule?n:{default:n},o=e("@metamask/obs-store"),i=e("../metamask-controller"),a=e("../../../shared/constants/time"),c=e("../../../shared/constants/alarms"),l=e("../../../shared/modules/mv3.utils");class d extends s.default{constructor(e={}){const{addUnlockListener:t,isUnlocked:r,initState:n,onInactiveTimeout:s,showUnlockRequest:i,preferencesStore:a,qrHardwareStore:c}=e;super(),this.onInactiveTimeout=s||(()=>undefined),this.store=new o.ObservableStore({timeoutMinutes:0,connectedStatusPopoverHasBeenShown:!0,defaultHomeActiveTabName:null,browserEnvironment:{},popupGasPollTokens:[],notificationGasPollTokens:[],fullScreenGasPollTokens:[],recoveryPhraseReminderHasBeenShown:!1,recoveryPhraseReminderLastShown:(new Date).getTime(),collectiblesDetectionNoticeDismissed:!1,enableEIP1559V2NoticeDismissed:!1,showTestnetMessageInDropdown:!0,showPortfolioTooltip:!0,trezorModel:null,...n,qrHardware:{},collectiblesDropdownState:{},usedNetworks:{"0x1":!0,"0x5":!0,"0x539":!0}}),this.timer=null,this.isUnlocked=r,this.waitingForUnlock=[],t(this.handleUnlock.bind(this)),this._showUnlockRequest=i,a.subscribe((({preferences:e})=>{this.store.getState().timeoutMinutes!==e.autoLockTimeLimit&&this._setInactiveTimeout(e.autoLockTimeLimit)})),c.subscribe((e=>{this.store.updateState({qrHardware:e})}));const{preferences:l}=a.getState();this._setInactiveTimeout(l.autoLockTimeLimit)}getUnlockPromise(e){return new Promise((t=>{this.isUnlocked()?t():this.waitForUnlock(t,e)}))}waitForUnlock(e,t){this.waitingForUnlock.push({resolve:e}),this.emit(i.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE),t&&this._showUnlockRequest()}handleUnlock(){if(this.waitingForUnlock.length>0){for(;this.waitingForUnlock.length>0;)this.waitingForUnlock.shift().resolve();this.emit(i.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE)}}setDefaultHomeActiveTabName(e){this.store.updateState({defaultHomeActiveTabName:e})}setConnectedStatusPopoverHasBeenShown(){this.store.updateState({connectedStatusPopoverHasBeenShown:!0})}setRecoveryPhraseReminderHasBeenShown(){this.store.updateState({recoveryPhraseReminderHasBeenShown:!0})}setRecoveryPhraseReminderLastShown(e){this.store.updateState({recoveryPhraseReminderLastShown:e})}setLastActiveTime(){this._resetTimer()}_setInactiveTimeout(e){this.store.updateState({timeoutMinutes:e}),this._resetTimer()}_resetTimer(){const{timeoutMinutes:e}=this.store.getState();this.timer&&(l.isManifestV3?chrome.alarms.clear(c.AUTO_LOCK_TIMEOUT_ALARM):clearTimeout(this.timer)),e&&(l.isManifestV3?(chrome.alarms.create(c.AUTO_LOCK_TIMEOUT_ALARM,{delayInMinutes:e,periodInMinutes:e}),chrome.alarms.onAlarm.addListener((()=>{chrome.alarms.getAll((e=>{e.find((e=>e.name===c.AUTO_LOCK_TIMEOUT_ALARM))&&(this.onInactiveTimeout(),chrome.alarms.clear(c.AUTO_LOCK_TIMEOUT_ALARM))}))}))):this.timer=setTimeout((()=>this.onInactiveTimeout()),e*a.MINUTE))}setBrowserEnvironment(e,t){this.store.updateState({browserEnvironment:{os:e,browser:t}})}addPollingToken(e,t){const r=this.store.getState()[t];this.store.updateState({[t]:[...r,e]})}removePollingToken(e,t){const r=this.store.getState()[t];this.store.updateState({[t]:r.filter((t=>t!==e))})}clearPollingTokens(){this.store.updateState({popupGasPollTokens:[],notificationGasPollTokens:[],fullScreenGasPollTokens:[]})}setShowTestnetMessageInDropdown(e){this.store.updateState({showTestnetMessageInDropdown:e})}setShowPortfolioTooltip(e){this.store.updateState({showPortfolioTooltip:e})}setTrezorModel(e){this.store.updateState({trezorModel:e})}setCollectiblesDetectionNoticeDismissed(e){this.store.updateState({collectiblesDetectionNoticeDismissed:e})}setEnableEIP1559V2NoticeDismissed(e){this.store.updateState({enableEIP1559V2NoticeDismissed:e})}updateCollectibleDropDownState(e){this.store.updateState({collectiblesDropdownState:e})}setFirstTimeUsedNetwork(e){const t=this.store.getState(),{usedNetworks:r}=t;r[e]=!0,this.store.updateState({usedNetworks:r})}}r.default=d}}},{package:"$root$"}],[91,{"../../shared/constants/app":7055,"../../shared/constants/hardware-wallets":7057,"../../shared/constants/metametrics":7059,"../../shared/constants/network":7060,"../../shared/constants/permissions":7061,"../../shared/constants/phishing":7062,"../../shared/constants/swaps":7064,"../../shared/constants/time":7065,"../../shared/constants/tokens":7066,"../../shared/constants/transaction":7067,"../../shared/lib/metamask-controller-utils":7070,"../../shared/modules/hexstring-utils":7081,"../../shared/modules/string-utils":7088,"../../shared/modules/transaction.utils":7090,"../../shared/notifications":7091,"../../ui/helpers/utils/token-util":7671,"./account-import-strategies":4,"./controllers/alert":8,"./controllers/app-state":9,"./controllers/backup":10,"./controllers/cached-balances":11,"./controllers/detect-tokens":12,"./controllers/ens":14,"./controllers/incoming-transactions":15,"./controllers/metametrics":16,"./controllers/network":20,"./controllers/onboarding":24,"./controllers/permissions":29,"./controllers/preferences":33,"./controllers/swaps":34,"./controllers/threebox":35,"./controllers/transactions":36,"./detect-multiple-instances":42,"./flask/snaps-blocklist":44,"./flask/snaps-utilities":45,"./lib/ComposableObservableStore":46,"./lib/account-tracker":47,"./lib/createLoggerMiddleware":50,"./lib/createMetaRPCHandler":51,"./lib/createOnboardingMiddleware":52,"./lib/createOriginMiddleware":53,"./lib/createRPCMethodTrackingMiddleware":54,"./lib/createTabIdMiddleware":56,"./lib/decrypt-message-manager":57,"./lib/encryption-public-key-manager":58,"./lib/message-manager":67,"./lib/personal-message-manager":72,"./lib/rpc-method-middleware":83,"./lib/seed-phrase-verifier":84,"./lib/segment":85,"./lib/stream-utils":88,"./lib/typed-message-manager":89,"@keystonehq/metamask-airgapped-keyring":813,"@metamask/controllers":1294,"@metamask/eth-ledger-bridge-keyring":1387,"@metamask/obs-store":1471,"@metamask/obs-store/dist/asStream":1470,"@metamask/smart-transactions-controller":1578,"@metamask/snap-controllers":1587,"@sentry/browser":1817,_process:6295,"await-semaphore":2147,buffer:2438,"eth-json-rpc-filters":2747,"eth-json-rpc-filters/subscriptionManager":2753,"eth-json-rpc-middleware":2771,"eth-keyring-controller":2799,"eth-lattice-keyring":2800,"eth-query":2817,"eth-rpc-errors":2821,"eth-trezor-keyring":2836,events:2439,"json-rpc-engine":5626,"json-rpc-middleware-stream/engineStream":5628,lodash:6046,loglevel:6059,nanoid:6134,pump:6395},function(){with(this)return function(){"use strict";return function(e,t,r){(function(t,n){(function(){Object.defineProperty(r,"__esModule",{value:!0}),r.default=r.METAMASK_CONTROLLER_EVENTS=void 0;var s=Pe(e("events")),o=Pe(e("pump")),i=e("@metamask/obs-store"),a=e("@metamask/obs-store/dist/asStream"),c=e("json-rpc-engine"),l=e("lodash"),d=Pe(e("json-rpc-middleware-stream/engineStream")),h=Pe(e("eth-json-rpc-filters")),u=Pe(e("eth-json-rpc-filters/subscriptionManager")),p=e("eth-json-rpc-middleware"),g=Pe(e("eth-keyring-controller")),m=e("eth-rpc-errors"),f=e("await-semaphore"),y=Pe(e("loglevel")),C=Pe(e("eth-trezor-keyring")),b=Pe(e("@metamask/eth-ledger-bridge-keyring")),k=Pe(e("eth-lattice-keyring")),S=e("@keystonehq/metamask-airgapped-keyring"),w=Pe(e("eth-query")),v=Pe(e("nanoid")),E=e("@sentry/browser"),T=e("@metamask/controllers"),M=Pe(e("@metamask/smart-transactions-controller")),A=e("@metamask/snap-controllers"),P=e("../../shared/constants/transaction"),_=e("../../shared/constants/phishing"),R=e("../../shared/constants/swaps"),I=e("../../shared/constants/network"),N=e("../../shared/constants/hardware-wallets"),x=e("../../shared/constants/permissions"),O=e("../../shared/notifications"),U=e("../../shared/modules/hexstring-utils"),L=e("../../shared/constants/time"),D=e("../../shared/constants/app"),K=e("../../shared/constants/metametrics"),j=e("../../ui/helpers/utils/token-util"),F=e("../../shared/modules/string-utils"),B=e("../../shared/modules/transaction.utils"),q=e("../../shared/constants/tokens"),H=e("../../shared/lib/metamask-controller-utils"),$=e("./detect-multiple-instances"),G=Pe(e("./lib/ComposableObservableStore")),V=Pe(e("./lib/account-tracker")),Y=Pe(e("./lib/createLoggerMiddleware")),W=e("./lib/rpc-method-middleware"),z=Pe(e("./lib/createOriginMiddleware")),J=Pe(e("./lib/createTabIdMiddleware")),Q=Pe(e("./lib/createOnboardingMiddleware")),Z=e("./lib/stream-utils"),X=Pe(e("./controllers/ens")),ee=Ae(e("./controllers/network")),te=Pe(e("./controllers/preferences")),re=Pe(e("./controllers/app-state")),ne=Pe(e("./controllers/cached-balances")),se=Pe(e("./controllers/alert")),oe=Pe(e("./controllers/onboarding")),ie=Pe(e("./controllers/threebox")),ae=Pe(e("./controllers/backup")),ce=Pe(e("./controllers/incoming-transactions")),le=Ae(e("./lib/message-manager")),de=Pe(e("./lib/decrypt-message-manager")),he=Pe(e("./lib/encryption-public-key-manager")),ue=Pe(e("./lib/personal-message-manager")),pe=Pe(e("./lib/typed-message-manager")),ge=Pe(e("./controllers/transactions")),me=Pe(e("./controllers/detect-tokens")),fe=Pe(e("./controllers/swaps")),ye=Pe(e("./account-import-strategies")),Ce=Pe(e("./lib/seed-phrase-verifier")),be=Pe(e("./controllers/metametrics")),ke=e("./lib/segment"),Se=Pe(e("./lib/createMetaRPCHandler")),we=e("./controllers/permissions"),ve=Pe(e("./lib/createRPCMethodTrackingMiddleware")),Ee=e("./flask/snaps-utilities"),Te=e("./flask/snaps-blocklist");function Me(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(Me=function(e){return e?r:t})(e)}function Ae(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var r=Me(t);if(r&&r.has(e))return r.get(e);var n={},s=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if("default"!==o&&Object.prototype.hasOwnProperty.call(e,o)){var i=s?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,r&&r.set(e,n),n}function Pe(e){return e&&e.__esModule?e:{default:e}}r.METAMASK_CONTROLLER_EVENTS={UPDATE_BADGE:"updateBadge",APPROVAL_STATE_CHANGE:"ApprovalController:stateChange"};class _e extends s.default{constructor(e){var r;super(),this.defaultMaxListeners=20,this.sendUpdate=(0,l.debounce)(this.privateSendUpdate.bind(this),200*L.MILLISECOND),this.opts=e,this.extension=e.browser,this.platform=e.platform,this.notificationManager=e.notificationManager;const n=e.initState||{},s=this.platform.getVersion();this.recordFirstTimeInfo(n),this.activeControllerConnections=0,this.getRequestAccountTabIds=e.getRequestAccountTabIds,this.getOpenMetamaskTabsIds=e.getOpenMetamaskTabsIds,this.controllerMessenger=new T.ControllerMessenger,this.store=new G.default({state:n,controllerMessenger:this.controllerMessenger,persist:!0}),this.connections={},this.createVaultMutex=new f.Mutex,this.extension.runtime.onInstalled.addListener((e=>{"update"===e.reason&&"8.1.0"===s&&this.platform.openExtensionInBrowser()})),this.approvalController=new T.ApprovalController({messenger:this.controllerMessenger.getRestricted({name:"ApprovalController"}),showApprovalRequest:e.showUserConfirmation}),this.networkController=new ee.default(n.NetworkController),this.networkController.setInfuraProjectId(e.infuraProjectId),this.initializeProvider(),this.provider=this.networkController.getProviderAndBlockTracker().provider,this.blockTracker=this.networkController.getProviderAndBlockTracker().blockTracker;const o=this.controllerMessenger.getRestricted({name:"TokenListController"});this.tokenListController=new T.TokenListController({chainId:(0,H.hexToDecimal)(this.networkController.getCurrentChainId()),preventPollingOnNetworkRestart:!0,onNetworkStateChange:e=>{this.networkController.store.subscribe((t=>{const r={...t,provider:{...t.provider,chainId:(0,H.hexToDecimal)(t.provider.chainId)}};return e(r)}))},messenger:o,state:n.TokenListController}),this.preferencesController=new te.default({initState:n.PreferencesController,initLangCode:e.initLangCode,openPopup:e.openPopup,network:this.networkController,tokenListController:this.tokenListController,provider:this.provider,migrateAddressBookState:this.migrateAddressBookState.bind(this)}),this.tokensController=new T.TokensController({onPreferencesStateChange:this.preferencesController.store.subscribe.bind(this.preferencesController.store),onNetworkStateChange:this.networkController.store.subscribe.bind(this.networkController.store),config:{provider:this.provider},state:n.TokensController}),this.assetsContractController=new T.AssetsContractController({onPreferencesStateChange:e=>this.preferencesController.store.subscribe(e),onNetworkStateChange:e=>this.networkController.store.subscribe((t=>{const r={...t,provider:{...t.provider,chainId:(0,H.hexToDecimal)(t.provider.chainId)}};return e(r)}))},{provider:this.provider},n.AssetsContractController),this.collectiblesController=new T.CollectiblesController({onPreferencesStateChange:this.preferencesController.store.subscribe.bind(this.preferencesController.store),onNetworkStateChange:this.networkController.store.subscribe.bind(this.networkController.store),getERC721AssetName:this.assetsContractController.getERC721AssetName.bind(this.assetsContractController),getERC721AssetSymbol:this.assetsContractController.getERC721AssetSymbol.bind(this.assetsContractController),getERC721TokenURI:this.assetsContractController.getERC721TokenURI.bind(this.assetsContractController),getERC721OwnerOf:this.assetsContractController.getERC721OwnerOf.bind(this.assetsContractController),getERC1155BalanceOf:this.assetsContractController.getERC1155BalanceOf.bind(this.assetsContractController),getERC1155TokenURI:this.assetsContractController.getERC1155TokenURI.bind(this.assetsContractController),onCollectibleAdded:({address:e,symbol:t,tokenId:r,standard:n,source:s})=>this.metaMetricsController.trackEvent({event:K.EVENT_NAMES.NFT_ADDED,category:K.EVENT.CATEGORIES.WALLET,properties:{token_contract_address:e,token_symbol:t,asset_type:P.ASSET_TYPES.COLLECTIBLE,token_standard:n,source:s},sensitiveProperties:{tokenId:r}})},{},n.CollectiblesController),this.collectiblesController.setApiKey(t.env.OPENSEA_KEY),this.metaMetricsController=new be.default({segment:ke.segment,preferencesStore:this.preferencesController.store,onNetworkDidChange:this.networkController.on.bind(this.networkController,ee.NETWORK_EVENTS.NETWORK_DID_CHANGE),getNetworkIdentifier:this.networkController.getNetworkIdentifier.bind(this.networkController),getCurrentChainId:this.networkController.getCurrentChainId.bind(this.networkController),version:this.platform.getVersion(),environment:"pull-request",extension:this.extension,initState:n.MetaMetricsController,captureException:E.captureException}),this.on("update",(e=>{this.metaMetricsController.handleMetaMaskStateUpdate(e)}));const i=this.controllerMessenger.getRestricted({name:"GasFeeController"}),a=R.GAS_API_BASE_URL;this.gasFeeController=new T.GasFeeController({interval:1e4,messenger:i,clientId:R.SWAPS_CLIENT_ID,getProvider:()=>this.networkController.getProviderAndBlockTracker().provider,onNetworkStateChange:this.networkController.on.bind(this.networkController,ee.NETWORK_EVENTS.NETWORK_DID_CHANGE),getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),getCurrentAccountEIP1559Compatibility:this.getCurrentAccountEIP1559Compatibility.bind(this),legacyAPIEndpoint:`${a}/networks/<chain_id>/gasPrices`,EIP1559APIEndpoint:`${a}/networks/<chain_id>/suggestedGasFees`,getCurrentNetworkLegacyGasAPICompatibility:()=>this.networkController.getCurrentChainId()===I.CHAIN_IDS.MAINNET,getChainId:()=>this.networkController.getCurrentChainId()}),this.qrHardwareKeyring=new S.MetaMaskKeyring,this.appStateController=new re.default({addUnlockListener:this.on.bind(this,"unlock"),isUnlocked:this.isUnlocked.bind(this),initState:n.AppStateController,onInactiveTimeout:()=>this.setLocked(),showUnlockRequest:e.showUserConfirmation,preferencesStore:this.preferencesController.store,qrHardwareStore:this.qrHardwareKeyring.getMemStore()});const c=this.controllerMessenger.getRestricted({name:"CurrencyRateController"});this.currencyRateController=new T.CurrencyRateController({includeUsdRate:!0,messenger:c,state:{...n.CurrencyController,nativeCurrency:this.networkController.providerStore.getState().ticker}}),this.phishingController=new T.PhishingController,this.announcementController=new T.AnnouncementController({allAnnouncements:O.UI_NOTIFICATIONS},n.AnnouncementController),this.tokenRatesController=new T.TokenRatesController({onTokensStateChange:e=>this.tokensController.subscribe(e),onCurrencyRateStateChange:e=>this.controllerMessenger.subscribe(`${this.currencyRateController.name}:stateChange`,e),onNetworkStateChange:e=>this.networkController.store.subscribe((t=>{const r={...t,provider:{...t.provider,chainId:(0,H.hexToDecimal)(t.provider.chainId)}};return e(r)}))}),this.ensController=new X.default({provider:this.provider,getCurrentChainId:this.networkController.getCurrentChainId.bind(this.networkController),onNetworkDidChange:this.networkController.on.bind(this.networkController,ee.NETWORK_EVENTS.NETWORK_DID_CHANGE)}),this.incomingTransactionsController=new ce.default({blockTracker:this.blockTracker,onNetworkDidChange:this.networkController.on.bind(this.networkController,ee.NETWORK_EVENTS.NETWORK_DID_CHANGE),getCurrentChainId:this.networkController.getCurrentChainId.bind(this.networkController),preferencesController:this.preferencesController,initState:n.IncomingTransactionsController}),this.accountTracker=new V.default({provider:this.provider,blockTracker:this.blockTracker,getCurrentChainId:this.networkController.getCurrentChainId.bind(this.networkController)}),this.on("controllerConnectionChanged",(e=>{e>0?(this.accountTracker.start(),this.incomingTransactionsController.start(),this.currencyRateController.start(),this.preferencesController.store.getState().useTokenDetection&&this.tokenListController.start()):(this.accountTracker.stop(),this.incomingTransactionsController.stop(),this.currencyRateController.stop(),this.preferencesController.store.getState().useTokenDetection&&this.tokenListController.stop())})),this.cachedBalancesController=new ne.default({accountTracker:this.accountTracker,getCurrentChainId:this.networkController.getCurrentChainId.bind(this.networkController),initState:n.CachedBalancesController}),this.onboardingController=new oe.default({initState:n.OnboardingController}),this.tokensController.hub.on("pendingSuggestedAsset",(async()=>{await e.openPopup()}));const d=[C.default,b.default,k.default,S.MetaMaskKeyring];this.keyringController=new g.default({keyringTypes:d,initState:n.KeyringController,encryptor:e.encryptor||undefined}),this.keyringController.memStore.subscribe((e=>this._onKeyringControllerUpdate(e))),this.keyringController.on("unlock",(()=>this._onUnlock())),this.keyringController.on("lock",(()=>this._onLock()));const h=()=>this.preferencesController.store.getState().identities;this.permissionController=new T.PermissionController({messenger:this.controllerMessenger.getRestricted({name:"PermissionController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:hasRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`]}),state:n.PermissionController,caveatSpecifications:(0,we.getCaveatSpecifications)({getIdentities:h}),permissionSpecifications:{...(0,we.getPermissionSpecifications)({getIdentities:h,getAllAccounts:this.keyringController.getAccounts.bind(this.keyringController),captureKeyringTypesWithMissingIdentities:(e={},t=[])=>{const r=t.filter((t=>!e[t])).map((e=>{var t;return null===(t=this.keyringController.getKeyringForAccount(e))||void 0===t?void 0:t.type})),n=Object.keys(e||{}).length,s=Object.keys(this.accountTracker.store.getState().accounts||{}).length;(0,E.captureException)(new Error(`Attempt to get permission specifications failed because their were ${t.length} accounts, but ${n} identities, and the ${r} keyrings included accounts with missing identities. Meanwhile, there are ${s} accounts in the account tracker.`))}}),...this.getSnapPermissionSpecifications()},unrestrictedMethods:we.unrestrictedMethods}),this.permissionLogController=new we.PermissionLogController({restrictedMethods:new Set(Object.keys(x.RestrictedMethods)),initState:n.PermissionLogController}),this.subjectMetadataController=new T.SubjectMetadataController({messenger:this.controllerMessenger.getRestricted({name:"SubjectMetadataController",allowedActions:[`${this.permissionController.name}:hasPermissions`]}),state:n.SubjectMetadataController,subjectCacheLimit:100}),this.snapExecutionService=new A.IframeExecutionService({iframeUrl:new URL("https://metamask.github.io/iframe-execution-environment/0.9.0"),messenger:this.controllerMessenger.getRestricted({name:"ExecutionService"}),setupSnapProvider:this.setupSnapProvider.bind(this)});const u=this.controllerMessenger.getRestricted({name:"SnapController",allowedEvents:["ExecutionService:unhandledError","ExecutionService:outboundRequest","ExecutionService:outboundResponse"],allowedActions:[`${this.permissionController.name}:getEndowments`,`${this.permissionController.name}:getPermissions`,`${this.permissionController.name}:hasPermission`,`${this.permissionController.name}:hasPermissions`,`${this.permissionController.name}:requestPermissions`,`${this.permissionController.name}:revokeAllPermissions`,`${this.permissionController.name}:revokePermissions`,`${this.permissionController.name}:revokePermissionForAllSubjects`,`${this.approvalController.name}:addRequest`,`${this.permissionController.name}:grantPermissions`,"ExecutionService:executeSnap","ExecutionService:getRpcRequestHandler","ExecutionService:terminateSnap","ExecutionService:terminateAllSnaps","ExecutionService:handleRpcRequest"]});this.snapController=new A.SnapController({environmentEndowmentPermissions:Object.values(x.EndowmentPermissions),closeAllConnections:this.removeAllConnections.bind(this),getAppKey:async(e,t)=>(await this.appStateController.getUnlockPromise(!0),this.getAppKeyForSubject(`${t}:${e}`)),checkBlockList:async e=>(0,Ee.checkSnapsBlockList)(e,Te.SNAP_BLOCKLIST),state:n.SnapController,messenger:u,featureFlags:{dappsCanUpdateSnaps:!0}}),this.multiChainController=new A.MultiChainController({messenger:this.controllerMessenger.getRestricted({name:"MultiChainController",allowedActions:[`${this.permissionController.name}:getPermissions`,`${this.permissionController.name}:hasPermission`,`${this.snapController.name}:getAll`,`${this.snapController.name}:handleRequest`,`${this.snapController.name}:incrementActiveReferences`,`${this.snapController.name}:decrementActiveReferences`,`${this.approvalController.name}:addRequest`,`${this.permissionController.name}:grantPermissions`]}),notify:console.log,state:n.MultiChainController}),this.notificationController=new T.NotificationController({messenger:this.controllerMessenger.getRestricted({name:"NotificationController"}),state:n.NotificationController}),this.rateLimitController=new T.RateLimitController({messenger:this.controllerMessenger.getRestricted({name:"RateLimitController"}),implementations:{showNativeNotification:(e,t)=>{var r;const n=this.controllerMessenger.call("SubjectMetadataController:getState").subjectMetadata[e];return this.platform._showNotification(null!==(r=null==n?void 0:n.name)&&void 0!==r?r:e,t),null},showInAppNotification:(e,t)=>(this.controllerMessenger.call("NotificationController:show",e,t),null)}}),this.detectTokensController=new me.default({preferences:this.preferencesController,tokensController:this.tokensController,assetsContractController:this.assetsContractController,network:this.networkController,keyringMemStore:this.keyringController.memStore,tokenList:this.tokenListController,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.addressBookController=new T.AddressBookController(undefined,n.AddressBookController),this.alertController=new se.default({initState:n.AlertController,preferencesStore:this.preferencesController.store}),this.threeBoxController=new ie.default({preferencesController:this.preferencesController,addressBookController:this.addressBookController,keyringController:this.keyringController,initState:n.ThreeBoxController,getKeyringControllerState:this.keyringController.memStore.getState.bind(this.keyringController.memStore),version:s,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.backupController=new ae.default({preferencesController:this.preferencesController,addressBookController:this.addressBookController,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.txController=new ge.default({initState:n.TransactionController||n.TransactionManager,getPermittedAccounts:this.getPermittedAccounts.bind(this),getProviderConfig:this.networkController.getProviderConfig.bind(this.networkController),getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),getCurrentAccountEIP1559Compatibility:this.getCurrentAccountEIP1559Compatibility.bind(this),networkStore:this.networkController.networkStore,getCurrentChainId:this.networkController.getCurrentChainId.bind(this.networkController),preferencesStore:this.preferencesController.store,txHistoryLimit:60,signTransaction:this.keyringController.signTransaction.bind(this.keyringController),provider:this.provider,blockTracker:this.blockTracker,createEventFragment:this.metaMetricsController.createEventFragment.bind(this.metaMetricsController),updateEventFragment:this.metaMetricsController.updateEventFragment.bind(this.metaMetricsController),finalizeEventFragment:this.metaMetricsController.finalizeEventFragment.bind(this.metaMetricsController),getEventFragmentById:this.metaMetricsController.getEventFragmentById.bind(this.metaMetricsController),trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getParticipateInMetrics:()=>this.metaMetricsController.state.participateInMetaMetrics,getEIP1559GasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),getExternalPendingTransactions:this.getExternalPendingTransactions.bind(this),getAccountType:this.getAccountType.bind(this),getDeviceModel:this.getDeviceModel.bind(this),getTokenStandardAndDetails:this.assetsContractController.getTokenStandardAndDetails.bind(this.assetsContractController)}),this.txController.on("newUnapprovedTx",(()=>e.showUserConfirmation())),this.txController.on("tx:status-update",(async(e,t)=>{if(t===P.TRANSACTION_STATUSES.CONFIRMED||t===P.TRANSACTION_STATUSES.FAILED){const t=this.txController.txStateManager.getTransaction(e),i=this.preferencesController.getFrequentRpcListDetail();let a={};if(t.chainId){var r;const e=i.find((e=>t.chainId===e.chainId));a=null!==(r=null==e?void 0:e.rpcPrefs)&&void 0!==r?r:{}}this.platform.showTransactionNotification(t,a);const{txReceipt:c}=t;if(t.type===P.TRANSACTION_TYPES.TOKEN_METHOD_TRANSFER_FROM&&t.txParams!==undefined){var n,s;const{data:e,to:r,from:o}=t.txParams,{chainId:i}=t,a=(0,B.parseStandardTokenTransactionData)(e),c=null!==(n=(0,j.getTokenIdParam)(a))&&void 0!==n?n:(0,H.getTokenValueParam)(a),{allCollectibles:l}=this.collectiblesController.state,d=null==l||null===(s=l[o])||void 0===s?void 0:s[i].find((({address:e,tokenId:t})=>(0,F.isEqualCaseInsensitive)(e,r)&&t===c));d&&this.collectiblesController.checkAndUpdateSingleCollectibleOwnershipStatus(d,!1,{userAddress:o,chainId:i})}const l=await this.getState();var o;if(c&&"0x0"===c.status)this.metaMetricsController.trackEvent({event:"Tx Status Update: On-Chain Failure",category:K.EVENT.CATEGORIES.BACKGROUND,properties:{action:"Transactions",errorMessage:null===(o=t.simulationFails)||void 0===o?void 0:o.reason,numberOfTokens:l.tokens.length,numberOfAccounts:Object.keys(l.accounts).length}},{matomoEvent:!0})}})),this.networkController.on(ee.NETWORK_EVENTS.NETWORK_DID_CHANGE,(async()=>{const{ticker:e}=this.networkController.getProviderConfig();try{await this.currencyRateController.setNativeCurrency(e)}catch(e){console.error(e)}})),this.networkController.lookupNetwork(),this.messageManager=new le.default({metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.personalMessageManager=new ue.default({metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.decryptMessageManager=new de.default({metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.encryptionPublicKeyManager=new he.default({metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.typedMessageManager=new pe.default({getCurrentChainId:this.networkController.getCurrentChainId.bind(this.networkController),metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.swapsController=new fe.default({getBufferedGasLimit:this.txController.txGasUtil.getBufferedGasLimit.bind(this.txController.txGasUtil),networkController:this.networkController,provider:this.provider,getProviderConfig:this.networkController.getProviderConfig.bind(this.networkController),getTokenRatesState:()=>this.tokenRatesController.state,getCurrentChainId:this.networkController.getCurrentChainId.bind(this.networkController),getEIP1559GasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController)}),this.smartTransactionsController=new M.default({onNetworkStateChange:this.networkController.store.subscribe.bind(this.networkController.store),getNetwork:this.networkController.getNetworkState.bind(this.networkController),getNonceLock:this.txController.nonceTracker.getNonceLock.bind(this.txController.nonceTracker),confirmExternalTransaction:this.txController.confirmExternalTransaction.bind(this.txController),provider:this.provider,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)},undefined,n.SmartTransactionsController),this.networkController.on(ee.NETWORK_EVENTS.NETWORK_DID_CHANGE,(()=>{this.accountTracker._updateAccounts()})),this.networkController.on(ee.NETWORK_EVENTS.NETWORK_WILL_CHANGE,(()=>{this.txController.txStateManager.clearUnapprovedTxs(),this.encryptionPublicKeyManager.clearUnapproved(),this.personalMessageManager.clearUnapproved(),this.typedMessageManager.clearUnapproved(),this.decryptMessageManager.clearUnapproved(),this.messageManager.clearUnapproved()})),this.on("update",(e=>this._onStateUpdate(e))),this.store.updateStructure({AppStateController:this.appStateController.store,TransactionController:this.txController.store,KeyringController:this.keyringController.store,PreferencesController:this.preferencesController.store,MetaMetricsController:this.metaMetricsController.store,AddressBookController:this.addressBookController,CurrencyController:this.currencyRateController,NetworkController:this.networkController.store,CachedBalancesController:this.cachedBalancesController.store,AlertController:this.alertController.store,OnboardingController:this.onboardingController.store,IncomingTransactionsController:this.incomingTransactionsController.store,PermissionController:this.permissionController,PermissionLogController:this.permissionLogController.store,SubjectMetadataController:this.subjectMetadataController,ThreeBoxController:this.threeBoxController.store,BackupController:this.backupController,AnnouncementController:this.announcementController,GasFeeController:this.gasFeeController,TokenListController:this.tokenListController,TokensController:this.tokensController,SmartTransactionsController:this.smartTransactionsController,CollectiblesController:this.collectiblesController,SnapController:this.snapController,NotificationController:this.notificationController}),this.memStore=new G.default({config:{AppStateController:this.appStateController.store,NetworkController:this.networkController.store,AccountTracker:this.accountTracker.store,TxController:this.txController.memStore,CachedBalancesController:this.cachedBalancesController.store,TokenRatesController:this.tokenRatesController,MessageManager:this.messageManager.memStore,PersonalMessageManager:this.personalMessageManager.memStore,DecryptMessageManager:this.decryptMessageManager.memStore,EncryptionPublicKeyManager:this.encryptionPublicKeyManager.memStore,TypesMessageManager:this.typedMessageManager.memStore,KeyringController:this.keyringController.memStore,PreferencesController:this.preferencesController.store,MetaMetricsController:this.metaMetricsController.store,AddressBookController:this.addressBookController,CurrencyController:this.currencyRateController,AlertController:this.alertController.store,OnboardingController:this.onboardingController.store,IncomingTransactionsController:this.incomingTransactionsController.store,PermissionController:this.permissionController,PermissionLogController:this.permissionLogController.store,SubjectMetadataController:this.subjectMetadataController,ThreeBoxController:this.threeBoxController.store,BackupController:this.backupController,SwapsController:this.swapsController.store,EnsController:this.ensController.store,ApprovalController:this.approvalController,AnnouncementController:this.announcementController,GasFeeController:this.gasFeeController,TokenListController:this.tokenListController,TokensController:this.tokensController,SmartTransactionsController:this.smartTransactionsController,CollectiblesController:this.collectiblesController,SnapController:this.snapController,NotificationController:this.notificationController},controllerMessenger:this.controllerMessenger}),this.memStore.subscribe(this.sendUpdate.bind(this));const p=null===(r={})||void 0===r?void 0:r.PASSWORD;p&&!this.isUnlocked()&&this.onboardingController.store.getState().completedOnboarding&&this.submitPassword(p),this.extension.runtime.getPlatformInfo().then((({os:e})=>{this.appStateController.setBrowserEnvironment(e,this.extension.runtime.getBrowserInfo===undefined?"chrome":"firefox")})),this.setupControllerEventSubscriptions(),this.publicConfigStore=this.createPublicConfigStore(),this.extension.runtime.onMessageExternal.addListener($.onMessageReceived),(0,$.checkForMultipleVersionsRunning)()}getSnapPermissionSpecifications(){return{...(0,we.buildSnapEndowmentSpecifications)(),...(0,we.buildSnapRestrictedMethodSpecifications)({addSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:add"),clearSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:clearSnapState"),getMnemonic:this.getPrimaryKeyringMnemonic.bind(this),getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),getSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:get"),handleSnapRpcRequest:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:handleRequest"),getSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getSnapState"),showConfirmation:(e,t)=>this.approvalController.addAndShowApprovalRequest({origin:e,type:D.MESSAGE_TYPE.SNAP_CONFIRM,requestData:t}),showNativeNotification:(e,t)=>this.controllerMessenger.call("RateLimitController:call",e,"showNativeNotification",e,t.message),showInAppNotification:(e,t)=>this.controllerMessenger.call("RateLimitController:call",e,"showInAppNotification",e,t.message),updateSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:updateSnapState")})}}dismissNotifications(e){this.notificationController.dismiss(e)}markNotificationsAsRead(e){this.notificationController.markRead(e)}setupControllerEventSubscriptions(){const e=async(e,t)=>{this.isUnlocked()&&this.notifyConnections(e,{method:we.NOTIFICATION_NAMES.accountsChanged,params:t.length<2?t:await this.getPermittedAccounts(e)}),this.permissionLogController.updateAccountsHistory(e,t)};let t;this.preferencesController.store.subscribe((async({selectedAddress:r})=>{if(r&&r!==t){t=r;const n=(0,we.getPermittedAccountsByOrigin)(this.permissionController.state);for(const[t,s]of n.entries())s.includes(r)&&e(t,s)}})),this.controllerMessenger.subscribe(`${this.permissionController.name}:stateChange`,(async(t,r)=>{const n=(0,we.getChangedAccounts)(t,r);for(const[t,r]of n.entries())e(t,r)}),we.getPermittedAccountsByOrigin),this.controllerMessenger.subscribe(`${this.snapController.name}:snapAdded`,((e,t=null)=>{const{manifest:{proposedName:r},version:n}=e;this.subjectMetadataController.addSubjectMetadata({subjectType:D.SUBJECT_TYPES.SNAP,name:r,origin:e.id,version:n,svgIcon:t})})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapInstalled`,(e=>{this.metaMetricsController.trackEvent({event:"Snap Installed",category:K.EVENT.CATEGORIES.SNAPS,properties:{snap_id:e.id,version:e.version}})})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapUpdated`,((e,t)=>{this.metaMetricsController.trackEvent({event:"Snap Updated",category:K.EVENT.CATEGORIES.SNAPS,properties:{snap_id:e.id,old_version:t,new_version:e.version}})})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapTerminated`,(e=>{const t=Object.values(this.approvalController.state.pendingApprovals).filter((t=>t.origin===e.id&&t.type===D.MESSAGE_TYPE.SNAP_CONFIRM));for(const e of t)this.approvalController.reject(e.id,new Error("Snap was terminated."))}))}initializeProvider(){const e=this.platform.getVersion(),t={static:{eth_syncing:!1,web3_clientVersion:`MetaMask/v${e}`},version:e,getAccounts:async({origin:e},{suppressUnauthorizedError:t=!0}={})=>{if(e===D.ORIGIN_METAMASK){const e=this.preferencesController.getSelectedAddress();return e?[e]:[]}return this.isUnlocked()?await this.getPermittedAccounts(e,{suppressUnauthorizedError:t}):[]},processTransaction:this.newUnapprovedTransaction.bind(this),processEthSignMessage:this.newUnsignedMessage.bind(this),processTypedMessage:this.newUnsignedTypedMessage.bind(this),processTypedMessageV3:this.newUnsignedTypedMessage.bind(this),processTypedMessageV4:this.newUnsignedTypedMessage.bind(this),processPersonalMessage:this.newUnsignedPersonalMessage.bind(this),processDecryptMessage:this.newRequestDecryptMessage.bind(this),processEncryptionPublicKey:this.newRequestEncryptionPublicKey.bind(this),getPendingNonce:this.getPendingNonce.bind(this),getPendingTransactionByHash:e=>this.txController.getTransactions({searchCriteria:{hash:e,status:P.TRANSACTION_STATUSES.SUBMITTED}})[0]};return this.networkController.initializeProvider(t)}createPublicConfigStore(){const e=new i.ObservableStore,{networkController:t}=this;function r(r){const n=t.getCurrentChainId();"loading"!==r.network&&e.putState(function(e,{isUnlocked:t,network:r}){return{isUnlocked:t,chainId:e,networkVersion:r}}(n,r))}return this.on("update",r),r(this.getState()),e}async getProviderState(e){return{isUnlocked:this.isUnlocked(),...this.getProviderNetworkState(),accounts:await this.getPermittedAccounts(e)}}getProviderNetworkState(e){const{network:t}=e||this.getState();return{chainId:this.networkController.getCurrentChainId(),networkVersion:t}}getState(){const{vault:e}=this.keyringController.store.getState();return{isInitialized:Boolean(e),...this.memStore.getFlatState()}}getApi(){const{addressBookController:e,alertController:t,approvalController:r,appStateController:n,collectiblesController:s,collectibleDetectionController:o,currencyRateController:i,detectTokensController:a,ensController:c,gasFeeController:l,keyringController:d,metaMetricsController:h,networkController:u,announcementController:p,onboardingController:g,permissionController:f,preferencesController:y,qrHardwareKeyring:C,swapsController:b,threeBoxController:k,tokensController:S,smartTransactionsController:w,txController:v,assetsContractController:E,backupController:T}=this;return{getState:this.getState.bind(this),setCurrentCurrency:i.setCurrentCurrency.bind(i),setUseBlockie:y.setUseBlockie.bind(y),setUseNonceField:y.setUseNonceField.bind(y),setUsePhishDetect:y.setUsePhishDetect.bind(y),setUseTokenDetection:y.setUseTokenDetection.bind(y),setUseCollectibleDetection:y.setUseCollectibleDetection.bind(y),setOpenSeaEnabled:y.setOpenSeaEnabled.bind(y),setIpfsGateway:y.setIpfsGateway.bind(y),setParticipateInMetaMetrics:h.setParticipateInMetaMetrics.bind(h),setCurrentLocale:y.setCurrentLocale.bind(y),markPasswordForgotten:this.markPasswordForgotten.bind(this),unMarkPasswordForgotten:this.unMarkPasswordForgotten.bind(this),getRequestAccountTabIds:this.getRequestAccountTabIds,getOpenMetamaskTabsIds:this.getOpenMetamaskTabsIds,markNotificationPopupAsAutomaticallyClosed:()=>this.notificationManager.markAsAutomaticallyClosed(),addNewAccount:this.addNewAccount.bind(this),verifySeedPhrase:this.verifySeedPhrase.bind(this),resetAccount:this.resetAccount.bind(this),removeAccount:this.removeAccount.bind(this),importAccountWithStrategy:this.importAccountWithStrategy.bind(this),connectHardware:this.connectHardware.bind(this),forgetDevice:this.forgetDevice.bind(this),checkHardwareStatus:this.checkHardwareStatus.bind(this),unlockHardwareWalletAccount:this.unlockHardwareWalletAccount.bind(this),setLedgerTransportPreference:this.setLedgerTransportPreference.bind(this),attemptLedgerTransportCreation:this.attemptLedgerTransportCreation.bind(this),establishLedgerTransportPreference:this.establishLedgerTransportPreference.bind(this),submitQRHardwareCryptoHDKey:C.submitCryptoHDKey.bind(C),submitQRHardwareCryptoAccount:C.submitCryptoAccount.bind(C),cancelSyncQRHardware:C.cancelSync.bind(C),submitQRHardwareSignature:C.submitSignature.bind(C),cancelQRHardwareSignRequest:C.cancelSignRequest.bind(C),fetchInfoToSync:this.fetchInfoToSync.bind(this),submitPassword:this.submitPassword.bind(this),verifyPassword:this.verifyPassword.bind(this),setProviderType:u.setProviderType.bind(u),rollbackToPreviousProvider:u.rollbackToPreviousProvider.bind(u),setCustomRpc:this.setCustomRpc.bind(this),updateAndSetCustomRpc:this.updateAndSetCustomRpc.bind(this),delCustomRpc:this.delCustomRpc.bind(this),addCustomNetwork:this.addCustomNetwork.bind(this),requestAddNetworkApproval:this.requestAddNetworkApproval.bind(this),setSelectedAddress:y.setSelectedAddress.bind(y),addToken:S.addToken.bind(S),rejectWatchAsset:S.rejectWatchAsset.bind(S),acceptWatchAsset:S.acceptWatchAsset.bind(S),updateTokenType:S.updateTokenType.bind(S),setAccountLabel:y.setAccountLabel.bind(y),setFeatureFlag:y.setFeatureFlag.bind(y),setPreference:y.setPreference.bind(y),addKnownMethodData:y.addKnownMethodData.bind(y),setDismissSeedBackUpReminder:y.setDismissSeedBackUpReminder.bind(y),setAdvancedGasFee:y.setAdvancedGasFee.bind(y),setEIP1559V2Enabled:y.setEIP1559V2Enabled.bind(y),setTheme:y.setTheme.bind(y),setCustomNetworkListEnabled:y.setCustomNetworkListEnabled.bind(y),getTokenStandardAndDetails:this.getTokenStandardAndDetails.bind(this),addCollectible:s.addCollectible.bind(s),addCollectibleVerifyOwnership:s.addCollectibleVerifyOwnership.bind(s),removeAndIgnoreCollectible:s.removeAndIgnoreCollectible.bind(s),removeCollectible:s.removeCollectible.bind(s),checkAndUpdateAllCollectiblesOwnershipStatus:s.checkAndUpdateAllCollectiblesOwnershipStatus.bind(s),checkAndUpdateSingleCollectibleOwnershipStatus:s.checkAndUpdateSingleCollectibleOwnershipStatus.bind(s),isCollectibleOwner:s.isCollectibleOwner.bind(s),setAddressBook:e.set.bind(e),removeFromAddressBook:e.delete.bind(e),setLastActiveTime:n.setLastActiveTime.bind(n),setDefaultHomeActiveTabName:n.setDefaultHomeActiveTabName.bind(n),setConnectedStatusPopoverHasBeenShown:n.setConnectedStatusPopoverHasBeenShown.bind(n),setRecoveryPhraseReminderHasBeenShown:n.setRecoveryPhraseReminderHasBeenShown.bind(n),setRecoveryPhraseReminderLastShown:n.setRecoveryPhraseReminderLastShown.bind(n),setShowTestnetMessageInDropdown:n.setShowTestnetMessageInDropdown.bind(n),setShowPortfolioTooltip:n.setShowPortfolioTooltip.bind(n),setCollectiblesDetectionNoticeDismissed:n.setCollectiblesDetectionNoticeDismissed.bind(n),setEnableEIP1559V2NoticeDismissed:n.setEnableEIP1559V2NoticeDismissed.bind(n),updateCollectibleDropDownState:n.updateCollectibleDropDownState.bind(n),setFirstTimeUsedNetwork:n.setFirstTimeUsedNetwork.bind(n),tryReverseResolveAddress:c.reverseResolveAddress.bind(c),setLocked:this.setLocked.bind(this),createNewVaultAndKeychain:this.createNewVaultAndKeychain.bind(this),createNewVaultAndRestore:this.createNewVaultAndRestore.bind(this),exportAccount:d.exportAccount.bind(d),cancelTransaction:v.cancelTransaction.bind(v),updateTransaction:v.updateTransaction.bind(v),updateAndApproveTransaction:v.updateAndApproveTransaction.bind(v),approveTransactionsWithSameNonce:v.approveTransactionsWithSameNonce.bind(v),createCancelTransaction:this.createCancelTransaction.bind(this),createSpeedUpTransaction:this.createSpeedUpTransaction.bind(this),estimateGas:this.estimateGas.bind(this),getNextNonce:this.getNextNonce.bind(this),addUnapprovedTransaction:v.addUnapprovedTransaction.bind(v),createTransactionEventFragment:v.createTransactionEventFragment.bind(v),getTransactions:v.getTransactions.bind(v),updateEditableParams:v.updateEditableParams.bind(v),updateTransactionGasFees:v.updateTransactionGasFees.bind(v),updateTransactionSendFlowHistory:v.updateTransactionSendFlowHistory.bind(v),updateSwapApprovalTransaction:v.updateSwapApprovalTransaction.bind(v),updateSwapTransaction:v.updateSwapTransaction.bind(v),updatePreviousGasParams:v.updatePreviousGasParams.bind(v),signMessage:this.signMessage.bind(this),cancelMessage:this.cancelMessage.bind(this),signPersonalMessage:this.signPersonalMessage.bind(this),cancelPersonalMessage:this.cancelPersonalMessage.bind(this),signTypedMessage:this.signTypedMessage.bind(this),cancelTypedMessage:this.cancelTypedMessage.bind(this),decryptMessage:this.decryptMessage.bind(this),decryptMessageInline:this.decryptMessageInline.bind(this),cancelDecryptMessage:this.cancelDecryptMessage.bind(this),encryptionPublicKey:this.encryptionPublicKey.bind(this),cancelEncryptionPublicKey:this.cancelEncryptionPublicKey.bind(this),setSeedPhraseBackedUp:g.setSeedPhraseBackedUp.bind(g),completeOnboarding:g.completeOnboarding.bind(g),setFirstTimeFlowType:g.setFirstTimeFlowType.bind(g),setAlertEnabledness:t.setAlertEnabledness.bind(t),setUnconnectedAccountAlertShown:t.setUnconnectedAccountAlertShown.bind(t),setWeb3ShimUsageAlertDismissed:t.setWeb3ShimUsageAlertDismissed.bind(t),setThreeBoxSyncingPermission:k.setThreeBoxSyncingPermission.bind(k),restoreFromThreeBox:k.restoreFromThreeBox.bind(k),setShowRestorePromptToFalse:k.setShowRestorePromptToFalse.bind(k),getThreeBoxLastUpdated:k.getLastUpdated.bind(k),turnThreeBoxSyncingOn:k.turnThreeBoxSyncingOn.bind(k),initializeThreeBox:this.initializeThreeBox.bind(this),removePermissionsFor:f.revokePermissions.bind(f),approvePermissionsRequest:f.acceptPermissionsRequest.bind(f),rejectPermissionsRequest:f.rejectPermissionsRequest.bind(f),...(0,we.getPermissionBackgroundApiMethods)(f),removeSnapError:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:removeSnapError"),disableSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:disable"),enableSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:enable"),removeSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:remove"),handleSnapRequest:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:handleRequest"),dismissNotifications:this.dismissNotifications.bind(this),markNotificationsAsRead:this.markNotificationsAsRead.bind(this),fetchAndSetQuotes:b.fetchAndSetQuotes.bind(b),setSelectedQuoteAggId:b.setSelectedQuoteAggId.bind(b),resetSwapsState:b.resetSwapsState.bind(b),setSwapsTokens:b.setSwapsTokens.bind(b),clearSwapsQuotes:b.clearSwapsQuotes.bind(b),setApproveTxId:b.setApproveTxId.bind(b),setTradeTxId:b.setTradeTxId.bind(b),setSwapsTxGasPrice:b.setSwapsTxGasPrice.bind(b),setSwapsTxGasLimit:b.setSwapsTxGasLimit.bind(b),setSwapsTxMaxFeePerGas:b.setSwapsTxMaxFeePerGas.bind(b),setSwapsTxMaxFeePriorityPerGas:b.setSwapsTxMaxFeePriorityPerGas.bind(b),safeRefetchQuotes:b.safeRefetchQuotes.bind(b),stopPollingForQuotes:b.stopPollingForQuotes.bind(b),setBackgroundSwapRouteState:b.setBackgroundSwapRouteState.bind(b),resetPostFetchState:b.resetPostFetchState.bind(b),setSwapsErrorKey:b.setSwapsErrorKey.bind(b),setInitialGasEstimate:b.setInitialGasEstimate.bind(b),setCustomApproveTxData:b.setCustomApproveTxData.bind(b),setSwapsLiveness:b.setSwapsLiveness.bind(b),setSwapsFeatureFlags:b.setSwapsFeatureFlags.bind(b),setSwapsUserFeeLevel:b.setSwapsUserFeeLevel.bind(b),setSwapsQuotesPollingLimitEnabled:b.setSwapsQuotesPollingLimitEnabled.bind(b),setSmartTransactionsOptInStatus:w.setOptInState.bind(w),fetchSmartTransactionFees:w.getFees.bind(w),clearSmartTransactionFees:w.clearFees.bind(w),submitSignedTransactions:w.submitSignedTransactions.bind(w),cancelSmartTransaction:w.cancelSmartTransaction.bind(w),fetchSmartTransactionsLiveness:w.fetchLiveness.bind(w),updateSmartTransaction:w.updateSmartTransaction.bind(w),setStatusRefreshInterval:w.setStatusRefreshInterval.bind(w),trackMetaMetricsEvent:h.trackEvent.bind(h),trackMetaMetricsPage:h.trackPage.bind(h),createEventFragment:h.createEventFragment.bind(h),updateEventFragment:h.updateEventFragment.bind(h),finalizeEventFragment:h.finalizeEventFragment.bind(h),resolvePendingApproval:r.accept.bind(r),rejectPendingApproval:async(e,t)=>{r.reject(e,new m.EthereumRpcError(t.code,t.message,t.data))},updateViewedNotifications:p.updateViewed.bind(p),getGasFeeEstimatesAndStartPolling:l.getGasFeeEstimatesAndStartPolling.bind(l),disconnectGasFeeEstimatePoller:l.disconnectPoller.bind(l),getGasFeeTimeEstimate:l.getTimeEstimate.bind(l),addPollingTokenToAppState:n.addPollingToken.bind(n),removePollingTokenFromAppState:n.removePollingToken.bind(n),backupUserData:T.backupUserData.bind(T),restoreUserData:T.restoreUserData.bind(T),detectNewTokens:a.detectNewTokens.bind(a),detectCollectibles:null,addDetectedTokens:S.addDetectedTokens.bind(S),addImportedTokens:S.addTokens.bind(S),ignoreTokens:S.ignoreTokens.bind(S),getBalancesInSingleCall:E.getBalancesInSingleCall.bind(E)}}async getTokenStandardAndDetails(e,t,r){var n,s;const o=await this.assetsContractController.getTokenStandardAndDetails(e,t,r);return{...o,decimals:null==o||null===(n=o.decimals)||void 0===n?void 0:n.toString(10),balance:null==o||null===(s=o.balance)||void 0===s?void 0:s.toString(10)}}async createNewVaultAndKeychain(e){const t=await this.createVaultMutex.acquire();try{let r;if((await this.keyringController.getAccounts()).length>0)r=await this.keyringController.fullUpdate();else{r=await this.keyringController.createNewVaultAndKeychain(e);const t=await this.keyringController.getAccounts();this.preferencesController.setAddresses(t),this.selectFirstIdentity()}return r}finally{t()}}async requestAddNetworkApproval(e,t){try{await this.approvalController.addAndShowApprovalRequest({origin:"metamask",type:"wallet_addEthereumChain",requestData:{chainId:e.chainId,blockExplorerUrl:e.rpcPrefs.blockExplorerUrl,chainName:e.nickname,rpcUrl:e.rpcUrl,ticker:e.ticker,imageUrl:e.rpcPrefs.imageUrl}})}catch(e){if(!t||"User rejected the request."!==e.message)throw e}}async addCustomNetwork(e){const{chainId:t,chainName:r,rpcUrl:n,ticker:s,blockExplorerUrl:o}=e;let i;await this.preferencesController.addToFrequentRpcList(n,t,s,r,{blockExplorerUrl:o});try{i=new URL(n).origin}catch{}this.metaMetricsController.trackEvent({event:"Custom Network Added",category:K.EVENT.CATEGORIES.NETWORK,referrer:{url:i},properties:{chain_id:t,network_name:r,network:i,symbol:s,block_explorer_url:o,source:K.EVENT.SOURCE.NETWORK.POPULAR_NETWORK_LIST},sensitiveProperties:{rpc_url:i}})}async createNewVaultAndRestore(e,t){const r=await this.createVaultMutex.acquire();try{let s,o;const i=n.from(t),{keyringController:a}=this;this.preferencesController.setAddresses([]),this.permissionController.clearState(),this.accountTracker.clearAccounts(),this.cachedBalancesController.clearCachedBalances(),this.txController.txStateManager.clearUnapprovedTxs();const c=await a.createNewVaultAndRestore(e,i),l=new w.default(this.provider);s=await a.getAccounts(),o=await this.getBalance(s[s.length-1],l);const[d]=a.getKeyringsByType("HD Key Tree");if(!d)throw new Error("MetamaskController - No HD Key Tree found");for(;"0x0"!==o;)await a.addNewAccount(d),s=await a.getAccounts(),o=await this.getBalance(s[s.length-1],l);s.length>1&&"0x0"===o&&(await this.removeAccount(s[s.length-1]),s=await a.getAccounts());const h=this.preferencesController.getLedgerTransportPreference();return this.setLedgerTransportPreference(h),this.preferencesController.setAddresses(s),this.selectFirstIdentity(),c}finally{r()}}getBalance(e,t){return new Promise(((r,n)=>{const s=this.accountTracker.store.getState().accounts[e];s&&s.balance?r(s.balance):t.getBalance(e,((e,t)=>{e?(n(e),y.default.error(e)):r(t||"0x0")}))}))}async fetchInfoToSync(){const{currentLocale:e,frequentRpcList:t,identities:r,selectedAddress:n,useTokenDetection:s}=this.preferencesController.store.getState(),o=!s&&this.networkController.store.getState().provider.chainId===I.CHAIN_IDS.MAINNET,{tokenList:i}=this.tokenListController.state,a=o?q.STATIC_MAINNET_TOKEN_LIST:i,c={currentLocale:e,frequentRpcList:t,identities:r,selectedAddress:n},{allTokens:l,allIgnoredTokens:d}=this.tokensController.state,h={};Object.keys(l).forEach((e=>{h[e]={},Object.keys(l[e]).forEach((t=>{const r=(0,U.toChecksumHexAddress)(t);h[e][r]=l[e][r].filter((e=>{var t;if(e.isERC721===undefined){if(a[null===(t=e.address)||void 0===t?void 0:t.toLowerCase()]!==undefined)return!0}else if(!1===e.isERC721)return!0;return!1}))}))}));const[u]=this.keyringController.getKeyringsByType("HD Key Tree"),p=this.keyringController.getKeyringsByType("Simple Key Pair"),g=await u.getAccounts(),m=(await Promise.all(p.map((e=>e.getAccounts())))).reduce(((e,t)=>[...e,...t]),[]),f={hd:g.filter(((e,t)=>g.indexOf(e)===t)).map((e=>(0,U.toChecksumHexAddress)(e))),simpleKeyPair:m.filter(((e,t)=>m.indexOf(e)===t)).map((e=>(0,U.toChecksumHexAddress)(e))),ledger:[],trezor:[],lattice:[]};let{transactions:y}=this.txController.store.getState();return y=Object.values(y).filter((e=>{const t=(0,U.toChecksumHexAddress)(e.txParams.from);return f.hd.includes(t)})),{accounts:f,preferences:c,transactions:y,tokens:{allTokens:h,allIgnoredTokens:d},network:this.networkController.store.getState()}}async submitPassword(e){await this.keyringController.submitPassword(e);try{await this.blockTracker.checkForLatestBlock()}catch(e){y.default.error("Error while unlocking extension.",e)}try{const e=this.threeBoxController.getThreeBoxSyncingState();e&&!this.threeBoxController.box?(this.threeBoxController.init(),this.threeBoxController.turnThreeBoxSyncingOn()):e&&this.threeBoxController.box&&this.threeBoxController.turnThreeBoxSyncingOn()}catch(e){y.default.error("Error while unlocking extension.",e)}const t=this.preferencesController.getLedgerTransportPreference();return this.setLedgerTransportPreference(t),this.keyringController.fullUpdate()}async verifyPassword(e){await this.keyringController.verifyPassword(e)}selectFirstIdentity(){const{identities:e}=this.preferencesController.store.getState(),[t]=Object.keys(e);this.preferencesController.setSelectedAddress(t)}getPrimaryKeyringMnemonic(){const[e]=this.keyringController.getKeyringsByType("HD Key Tree");if(!e.mnemonic)throw new Error("Primary keyring mnemonic unavailable.");return e.mnemonic}async getKeyringForDevice(e,t=null){let r=null;switch(e){case N.DEVICE_NAMES.TREZOR:r=C.default.type;break;case N.DEVICE_NAMES.LEDGER:r=b.default.type;break;case N.DEVICE_NAMES.QR:r=S.MetaMaskKeyring.type;break;case N.DEVICE_NAMES.LATTICE:r=k.default.type;break;default:throw new Error("MetamaskController:getKeyringForDevice - Unknown device")}let[n]=await this.keyringController.getKeyringsByType(r);if(n||(n=await this.keyringController.addNewKeyring(r)),t&&n.setHdPath&&n.setHdPath(t),e===N.DEVICE_NAMES.LATTICE&&(n.appName="MetaMask"),e===N.DEVICE_NAMES.TREZOR){const e=n.getModel();this.appStateController.setTrezorModel(e)}return n.network=this.networkController.getProviderConfig().type,n}async attemptLedgerTransportCreation(){const e=await this.getKeyringForDevice(N.DEVICE_NAMES.LEDGER);return await e.attemptMakeApp()}async establishLedgerTransportPreference(){const e=this.preferencesController.getLedgerTransportPreference();return await this.setLedgerTransportPreference(e)}async connectHardware(e,t,r){const n=await this.getKeyringForDevice(e,r);let s=[];switch(t){case-1:s=await n.getPreviousPage();break;case 1:s=await n.getNextPage();break;default:s=await n.getFirstPage()}const o=await this.keyringController.getAccounts(),i=[...new Set(o.concat(s.map((e=>e.address.toLowerCase()))))];return this.accountTracker.syncWithAddresses(i),s}async checkHardwareStatus(e,t){return(await this.getKeyringForDevice(e,t)).isUnlocked()}async forgetDevice(e){return(await this.getKeyringForDevice(e)).forgetDevice(),!0}async getAccountType(e){switch((await this.keyringController.getKeyringForAccount(e)).type){case N.KEYRING_TYPES.TREZOR:case N.KEYRING_TYPES.LATTICE:case N.KEYRING_TYPES.QR:case N.KEYRING_TYPES.LEDGER:return"hardware";case N.KEYRING_TYPES.IMPORTED:return"imported";default:return"MetaMask"}}async getDeviceModel(e){const t=await this.keyringController.getKeyringForAccount(e);switch(t.type){case N.KEYRING_TYPES.TREZOR:return t.getModel();case N.KEYRING_TYPES.QR:return t.getName();case N.KEYRING_TYPES.LEDGER:return N.DEVICE_NAMES.LEDGER;case N.KEYRING_TYPES.LATTICE:return N.DEVICE_NAMES.LATTICE;default:return"N/A"}}getAccountLabel(e,t,r){return`${e[0].toUpperCase()}${e.slice(1)} ${parseInt(t,10)+1} ${r||""}`.trim()}async unlockHardwareWalletAccount(e,t,r,n){const s=await this.getKeyringForDevice(t,r);s.setAccountToUnlock(e);const o=await this.keyringController.getAccounts(),i=await this.keyringController.addNewAccount(s),a=await this.keyringController.getAccounts();this.preferencesController.setAddresses(a),a.forEach((r=>{if(!o.includes(r)){const o=this.getAccountLabel(t===N.DEVICE_NAMES.QR?s.getName():t,e,n);this.preferencesController.setAccountLabel(r,o),this.preferencesController.setSelectedAddress(r)}}));const{identities:c}=this.preferencesController.store.getState();return{...i,identities:c}}async addNewAccount(e){const[t]=this.keyringController.getKeyringsByType("HD Key Tree");if(!t)throw new Error("MetamaskController - No HD Key Tree found");const{keyringController:r}=this,{identities:n}=this.preferencesController.store.getState();if(Object.keys(n).length===e){const e=await r.getAccounts(),n=await r.addNewAccount(t),s=await r.getAccounts();await this.verifySeedPhrase(),this.preferencesController.setAddresses(s),s.forEach((t=>{e.includes(t)||this.preferencesController.setSelectedAddress(t)}));const{identities:o}=this.preferencesController.store.getState();return{...n,identities:o}}return{...r.memStore.getState(),identities:n}}async verifySeedPhrase(){const[e]=this.keyringController.getKeyringsByType("HD Key Tree");if(!e)throw new Error("MetamaskController - No HD Key Tree found");const t=await e.serialize(),r=n.from(t.mnemonic),s=await e.getAccounts();if(s.length<1)throw new Error("MetamaskController - No accounts found");try{return await Ce.default.verifyAccounts(s,r),Array.from(r.values())}catch(e){throw y.default.error(e.message),e}}async resetAccount(){const e=this.preferencesController.getSelectedAddress();return this.txController.wipeTransactions(e),this.networkController.resetConnection(),e}async getPermittedAccounts(e,{suppressUnauthorizedError:t=!0}={}){try{return await this.permissionController.executeRestrictedMethod(e,x.RestrictedMethods.eth_accounts)}catch(e){if(t&&e.code===m.errorCodes.provider.unauthorized)return[];throw e}}removeAllAccountPermissions(e){this.permissionController.updatePermissionsByCaveat(x.CaveatTypes.restrictReturnedAccounts,(t=>we.CaveatMutatorFactories[x.CaveatTypes.restrictReturnedAccounts].removeAccount(e,t)))}async removeAccount(e){this.removeAllAccountPermissions(e),this.preferencesController.removeAddress(e),this.accountTracker.removeAccount([e]);const t=await this.keyringController.getKeyringForAccount(e);await this.keyringController.removeAccount(e);const r=t?await t.getAccounts():{};var n;0===(null==r?void 0:r.length)&&(null===(n=t.destroy)||void 0===n||n.call(t));return e}async importAccountWithStrategy(e,t){const r=await ye.default.importAccount(e,t),n=await this.keyringController.addNewKeyring("Simple Key Pair",[r]),[s]=await n.getAccounts(),o=await this.keyringController.getAccounts();this.preferencesController.setAddresses(o),await this.preferencesController.setSelectedAddress(s)}async newUnapprovedTransaction(e,t){return await this.txController.newUnapprovedTransaction(e,t)}async newUnsignedMessage(e,t){const r=(0,le.normalizeMsgData)(e.data);let n;if(66!==r.length&&67!==r.length)throw m.ethErrors.rpc.invalidParams("eth_sign requires 32 byte message hash");return n=this.messageManager.addUnapprovedMessageAsync(e,t),this.sendUpdate(),this.opts.showUserConfirmation(),await n}async getAppKeyForSubject(e,t){let r;return t?r=t:[r]=await this.keyringController.getAccounts(),this.keyringController.exportAppKeyForAddress(r,e)}async signMessage(e){y.default.info("MetaMaskController - signMessage");const t=e.metamaskId;try{const r=await this.messageManager.approveMessage(e),n=await this.keyringController.signMessage(r);return this.messageManager.setMsgStatusSigned(t,n),this.getState()}catch(e){throw y.default.info("MetaMaskController - eth_sign failed",e),this.messageManager.errorMessage(t,e),e}}cancelMessage(e){const{messageManager:t}=this;return t.rejectMsg(e),this.getState()}async newUnsignedPersonalMessage(e,t){const r=this.personalMessageManager.addUnapprovedMessageAsync(e,t);return this.sendUpdate(),this.opts.showUserConfirmation(),r}async signPersonalMessage(e){y.default.info("MetaMaskController - signPersonalMessage");const t=e.metamaskId;try{const r=await this.personalMessageManager.approveMessage(e),n=await this.keyringController.signPersonalMessage(r);return this.personalMessageManager.setMsgStatusSigned(t,n),this.getState()}catch(e){throw y.default.info("MetaMaskController - eth_personalSign failed",e),this.personalMessageManager.errorMessage(t,e),e}}cancelPersonalMessage(e){return this.personalMessageManager.rejectMsg(e),this.getState()}async newRequestDecryptMessage(e,t){const r=this.decryptMessageManager.addUnapprovedMessageAsync(e,t);return this.sendUpdate(),this.opts.showUserConfirmation(),r}async decryptMessageInline(e){y.default.info("MetaMaskController - decryptMessageInline");const t=e.metamaskId,r=this.decryptMessageManager.getMsg(t);try{const t=(0,U.stripHexPrefix)(e.data),s=n.from(t,"hex");e.data=JSON.parse(s.toString("utf8")),r.rawData=await this.keyringController.decryptMessage(e)}catch(e){r.error=e.message}return this.decryptMessageManager._updateMsg(r),this.getState()}async decryptMessage(e){y.default.info("MetaMaskController - decryptMessage");const t=e.metamaskId;try{const r=await this.decryptMessageManager.approveMessage(e),s=(0,U.stripHexPrefix)(r.data),o=n.from(s,"hex");r.data=JSON.parse(o.toString("utf8"));const i=await this.keyringController.decryptMessage(r);this.decryptMessageManager.setMsgStatusDecrypted(t,i)}catch(e){y.default.info("MetaMaskController - eth_decrypt failed.",e),this.decryptMessageManager.errorMessage(t,e)}return this.getState()}cancelDecryptMessage(e){return this.decryptMessageManager.rejectMsg(e),this.getState()}async newRequestEncryptionPublicKey(e,t){const r=e;switch((await this.keyringController.getKeyringForAccount(r)).type){case N.KEYRING_TYPES.LEDGER:return new Promise(((e,t)=>{t(new Error("Ledger does not support eth_getEncryptionPublicKey."))}));case N.KEYRING_TYPES.TREZOR:return new Promise(((e,t)=>{t(new Error("Trezor does not support eth_getEncryptionPublicKey."))}));case N.KEYRING_TYPES.LATTICE:return new Promise(((e,t)=>{t(new Error("Lattice does not support eth_getEncryptionPublicKey."))}));case N.KEYRING_TYPES.QR:return Promise.reject(new Error("QR hardware does not support eth_getEncryptionPublicKey."));default:{const r=this.encryptionPublicKeyManager.addUnapprovedMessageAsync(e,t);return this.sendUpdate(),this.opts.showUserConfirmation(),r}}}async encryptionPublicKey(e){y.default.info("MetaMaskController - encryptionPublicKey");const t=e.metamaskId;try{const r=await this.encryptionPublicKeyManager.approveMessage(e),n=await this.keyringController.getEncryptionPublicKey(r.data);this.encryptionPublicKeyManager.setMsgStatusReceived(t,n)}catch(e){y.default.info("MetaMaskController - eth_getEncryptionPublicKey failed.",e),this.encryptionPublicKeyManager.errorMessage(t,e)}return this.getState()}cancelEncryptionPublicKey(e){return this.encryptionPublicKeyManager.rejectMsg(e),this.getState()}newUnsignedTypedMessage(e,t,r){const n=this.typedMessageManager.addUnapprovedMessageAsync(e,t,r);return this.sendUpdate(),this.opts.showUserConfirmation(),n}async signTypedMessage(e){y.default.info("MetaMaskController - eth_signTypedData");const t=e.metamaskId,{version:r}=e;try{const n=await this.typedMessageManager.approveMessage(e);"V1"!==r&&"string"==typeof n.data&&(n.data=JSON.parse(n.data));const s=await this.keyringController.signTypedMessage(n,{version:r});return this.typedMessageManager.setMsgStatusSigned(t,s),this.getState()}catch(e){throw y.default.info("MetaMaskController - eth_signTypedData failed.",e),this.typedMessageManager.errorMessage(t,e),e}}cancelTypedMessage(e){return this.typedMessageManager.rejectMsg(e),this.getState()}async getCurrentAccountEIP1559Compatibility(){return!0}async createCancelTransaction(e,t,r){await this.txController.createCancelTransaction(e,t,r);return await this.getState()}async createSpeedUpTransaction(e,t,r){await this.txController.createSpeedUpTransaction(e,t,r);return await this.getState()}estimateGas(e){return new Promise(((t,r)=>this.txController.txGasUtil.query.estimateGas(e,((e,n)=>e?r(e):t(n.toString(16))))))}markPasswordForgotten(){this.preferencesController.setPasswordForgotten(!0),this.sendUpdate()}unMarkPasswordForgotten(){this.preferencesController.setPasswordForgotten(!1),this.sendUpdate()}setupUntrustedCommunication({connectionStream:e,sender:t,subjectType:r}){const{usePhishDetect:n}=this.preferencesController.store.getState();let s;if(s=r||(t.id&&t.id!==this.extension.runtime.id?D.SUBJECT_TYPES.EXTENSION:D.SUBJECT_TYPES.WEBSITE),t.url){const{hostname:r}=new URL(t.url),s=this.phishingController.test(r);if(n&&null!=s&&s.result)return void this.sendPhishingWarning(e,r,s)}const o=(0,Z.setupMultiplex)(e);this.setupProviderConnection(o.createStream("metamask-provider"),t,s),t.url&&this.setupPublicConfig(o.createStream("publicConfig"))}setupTrustedCommunication(e,t){const r=(0,Z.setupMultiplex)(e);this.setupControllerConnection(r.createStream("controller")),this.setupProviderConnection(r.createStream("provider"),t,D.SUBJECT_TYPES.INTERNAL)}setupPhishingCommunication({connectionStream:e}){const{usePhishDetect:t}=this.preferencesController.store.getState();if(!t)return;const r=(0,Z.setupMultiplex)(e).createStream("metamask-phishing-safelist");r.on("data",(0,Se.default)({safelistPhishingDomain:this.safelistPhishingDomain.bind(this)},r))}sendPhishingWarning(e,t,r){const n=_.PHISHING_NEW_ISSUE_URLS[null==r?void 0:r.name];(0,Z.setupMultiplex)(e).createStream("phishing").write({hostname:t,newIssueUrl:n})}setupControllerConnection(e){const t=this.getApi();this.activeControllerConnections+=1,this.emit("controllerConnectionChanged",this.activeControllerConnections),e.on("data",(0,Se.default)(t,e));const r=t=>{e._writableState.ended||e.write({jsonrpc:"2.0",method:"sendUpdate",params:[t]})};this.on("update",r),e.on("end",(()=>{this.activeControllerConnections-=1,this.emit("controllerConnectionChanged",this.activeControllerConnections),this.removeListener("update",r)}))}setupProviderConnection(e,t,r){let n,s;n=r===D.SUBJECT_TYPES.INTERNAL?D.ORIGIN_METAMASK:r===D.SUBJECT_TYPES.SNAP?t.snapId:new URL(t.url).origin,t.id&&t.id!==this.extension.runtime.id&&this.subjectMetadataController.addSubjectMetadata({origin:n,extensionId:t.id,subjectType:D.SUBJECT_TYPES.EXTENSION}),t.tab&&t.tab.id&&(s=t.tab.id);const i=this.setupProviderEngine({origin:n,sender:t,subjectType:r,tabId:s}),a=(0,d.default)({engine:i}),c=this.addConnection(n,{engine:i});(0,o.default)(e,a,e,(e=>{i._middleware.forEach((e=>{e.destroy&&"function"==typeof e.destroy&&e.destroy()})),c&&this.removeConnection(n,c),e&&y.default.error(e)}))}setupSnapProvider(e,t){this.setupUntrustedCommunication({connectionStream:t,sender:{snapId:e},subjectType:D.SUBJECT_TYPES.SNAP})}setupProviderEngine({origin:e,subjectType:t,sender:r,tabId:n}){const s=new c.JsonRpcEngine,{blockTracker:o,provider:i}=this,a=(0,h.default)({provider:i,blockTracker:o}),l=(0,u.default)({provider:i,blockTracker:o});return l.events.on("notification",(e=>s.emit("notification",e))),s.push((0,z.default)({origin:e})),n&&s.push((0,J.default)({tabId:n})),s.push((0,Y.default)({origin:e})),s.push(this.permissionLogController.createMiddleware()),s.push((0,A.createMultiChainMiddleware)({onConnect:this.multiChainController.onConnect.bind(this.multiChainController),onRequest:this.multiChainController.onRequest.bind(this.multiChainController)})),s.push((0,ve.default)({trackEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getMetricsState:this.metaMetricsController.store.getState.bind(this.metaMetricsController.store)})),t===D.SUBJECT_TYPES.WEBSITE&&s.push((0,Q.default)({location:r.url,registerOnboarding:this.onboardingController.registerOnboarding})),s.push((0,W.createMethodMiddleware)({origin:e,subjectType:t,addSubjectMetadata:this.subjectMetadataController.addSubjectMetadata.bind(this.subjectMetadataController),getProviderState:this.getProviderState.bind(this),getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),handleWatchAssetRequest:this.tokensController.watchAsset.bind(this.tokensController),requestUserApproval:this.approvalController.addAndShowApprovalRequest.bind(this.approvalController),sendMetrics:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getAccounts:this.getPermittedAccounts.bind(this,e),getPermissionsForOrigin:this.permissionController.getPermissions.bind(this.permissionController,e),hasPermission:this.permissionController.hasPermission.bind(this.permissionController,e),requestAccountsPermission:this.permissionController.requestPermissions.bind(this.permissionController,{origin:e},{eth_accounts:{}}),requestPermissionsForOrigin:this.permissionController.requestPermissions.bind(this.permissionController,{origin:e}),addCustomRpc:async({chainId:e,blockExplorerUrl:t,ticker:r,chainName:n,rpcUrl:s}={})=>{await this.preferencesController.addToFrequentRpcList(s,e,r,n,{blockExplorerUrl:t})},findCustomRpcBy:this.findCustomRpcBy.bind(this),getCurrentChainId:this.networkController.getCurrentChainId.bind(this.networkController),getCurrentRpcUrl:this.networkController.getCurrentRpcUrl.bind(this.networkController),setProviderType:this.networkController.setProviderType.bind(this.networkController),updateRpcTarget:({rpcUrl:e,chainId:t,ticker:r,nickname:n})=>{this.networkController.setRpcTarget(e,t,r,n)},getWeb3ShimUsageState:this.alertController.getWeb3ShimUsageState.bind(this.alertController),setWeb3ShimUsageRecorded:this.alertController.setWeb3ShimUsageRecorded.bind(this.alertController)})),s.push((0,W.createSnapMethodMiddleware)(t===D.SUBJECT_TYPES.SNAP,{getAppKey:this.getAppKeyForSubject.bind(this,e),getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),getSnaps:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getPermitted",e),requestPermissions:async t=>{const[r]=await this.permissionController.requestPermissions({origin:e},t);return Object.values(r)},getPermissions:this.permissionController.getPermissions.bind(this.permissionController,e),getAccounts:this.getPermittedAccounts.bind(this,e),installSnaps:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:install",e)})),s.push(a),s.push(l.middleware),t!==D.SUBJECT_TYPES.INTERNAL&&s.push(this.permissionController.createPermissionMiddleware({origin:e})),s.push((0,p.providerAsMiddleware)(i)),s}setupPublicConfig(e){const t=(0,a.storeAsStream)(this.publicConfigStore);(0,o.default)(t,e,(e=>{t.destroy(),e&&y.default.error(e)}))}addConnection(e,{engine:t}){if(e===D.ORIGIN_METAMASK)return null;this.connections[e]||(this.connections[e]={});const r=(0,v.default)();return this.connections[e][r]={engine:t},r}removeConnection(e,t){const r=this.connections[e];r&&(delete r[t],0===Object.keys(r).length&&delete this.connections[e])}removeAllConnections(e){const t=this.connections[e];t&&Object.keys(t).forEach((t=>{this.removeConnection(e,t)}))}notifyConnections(e,t){const r=this.connections[e];r&&Object.values(r).forEach((e=>{e.engine&&e.engine.emit("notification",t)}))}notifyAllConnections(e){const t="function"==typeof e?t=>e(t):()=>e;Object.keys(this.connections).forEach((e=>{Object.values(this.connections[e]).forEach((async r=>{r.engine&&r.engine.emit("notification",await t(e))}))}))}async _onKeyringControllerUpdate(e){const{keyrings:t}=e,r=t.reduce(((e,{accounts:t})=>e.concat(t)),[]);r.length&&(this.preferencesController.syncAddresses(r),this.accountTracker.syncWithAddresses(r))}_onUnlock(){this.notifyAllConnections((async e=>({method:we.NOTIFICATION_NAMES.unlockStateChanged,params:{isUnlocked:!0,accounts:await this.getPermittedAccounts(e)}}))),this.emit("unlock")}_onLock(){this.notifyAllConnections({method:we.NOTIFICATION_NAMES.unlockStateChanged,params:{isUnlocked:!1}}),this.emit("lock")}_onStateUpdate(e){this.isClientOpenAndUnlocked=e.isUnlocked&&this._isClientOpen,this.notifyAllConnections({method:we.NOTIFICATION_NAMES.chainChanged,params:this.getProviderNetworkState(e)})}privateSendUpdate(){this.emit("update",this.getState())}isUnlocked(){return this.keyringController.memStore.getState().isUnlocked}getExternalPendingTransactions(e){return this.smartTransactionsController.getTransactions({addressFrom:e,status:"pending"})}async getPendingNonce(e){const{nonceDetails:t,releaseLock:r}=await this.txController.nonceTracker.getNonceLock(e),n=t.params.highestSuggested;return r(),n}async getNextNonce(e){const t=await this.txController.nonceTracker.getNonceLock(e);return t.releaseLock(),t.nextNonce}async migrateAddressBookState(e,t,r=!1){const{addressBook:n}=this.addressBookController.state;if(n[e])for(const s of Object.keys(n[e])){const o=n[e][s];this.addressBookController.set(s,o.name,t,o.memo),r||this.addressBookController.delete(e,s)}}async updateAndSetCustomRpc(e,t,r="ETH",n,s){return this.networkController.setRpcTarget(e,t,r,n,s),await this.preferencesController.updateRpc({rpcUrl:e,chainId:t,ticker:r,nickname:n,rpcPrefs:s}),e}async setCustomRpc(e,t,r="ETH",n="",s={}){const o=this.preferencesController.getFrequentRpcListDetail().find((t=>e===t.rpcUrl));return o?this.networkController.setRpcTarget(o.rpcUrl,o.chainId,o.ticker,o.nickname,s):(this.networkController.setRpcTarget(e,t,r,n,s),await this.preferencesController.addToFrequentRpcList(e,t,r,n,s)),e}async delCustomRpc(e){await this.preferencesController.removeFromFrequentRpcList(e)}findCustomRpcBy(e){const t=this.preferencesController.getFrequentRpcListDetail();for(const r of t)for(const t of Object.keys(e))if(r[t]===e[t])return r;return null}async initializeThreeBox(){await this.threeBoxController.init()}async setLedgerTransportPreference(e){const t=this.preferencesController.getLedgerTransportPreference(),r=this.preferencesController.setLedgerTransportPreference(e),n=await this.getKeyringForDevice(N.DEVICE_NAMES.LEDGER);return null!=n&&n.updateTransportMethod?n.updateTransportMethod(r).catch((e=>{throw this.preferencesController.setLedgerTransportPreference(t),e})):undefined}recordFirstTimeInfo(e){if(!("firstTimeInfo"in e)){const t=this.platform.getVersion();e.firstTimeInfo={version:t,date:Date.now()}}}set isClientOpen(e){this._isClientOpen=e,this.detectTokensController.isOpen=e}onClientClosed(){try{this.gasFeeController.stopPolling(),this.appStateController.clearPollingTokens()}catch(e){console.error(e)}}onEnvironmentTypeClosed(e){const t=D.POLLING_TOKEN_ENVIRONMENT_TYPES[e];this.appStateController.store.getState()[t].forEach((e=>{this.gasFeeController.disconnectPoller(e),this.appStateController.removePollingToken(e,t)}))}safelistPhishingDomain(e){return this.phishingController.bypass(e)}setLocked(){var e;const[t]=this.keyringController.getKeyringsByType(N.KEYRING_TYPES.TREZOR);t&&t.dispose();const[r]=this.keyringController.getKeyringsByType(N.KEYRING_TYPES.LEDGER);return null==r||null===(e=r.destroy)||void 0===e||e.call(r),this.keyringController.setLocked()}}r.default=_e}).call(this)}).call(this,e("_process"),e("buffer").Buffer)}}},{package:"$root$"}],[92,{lodash:6046},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:2,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=2;try{"etherscan"===t.data.config.provider.type&&(t.data.config.provider.type="rpc",t.data.config.provider.rpcTarget="https://rpc.metamask.io/")}catch(e){}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[93,{lodash:6046},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:3,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=3;try{"https://rawtestrpc.metamask.io/"===t.data.config.provider.rpcTarget&&(t.data.config.provider.rpcTarget="https://testrpc.metamask.io/")}catch(e){}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[94,{lodash:6046},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:4,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=4;try{if("rpc"!==t.data.config.provider.type)return Promise.resolve(t);switch(t.data.config.provider.rpcTarget){case"https://testrpc.metamask.io/":t.data.config.provider={type:"testnet"};break;case"https://rpc.metamask.io/":t.data.config.provider={type:"mainnet"}}}catch(e){}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[95,{lodash:6046},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:5,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=5;try{const e=function(e){const{config:t}=e,r={...e,KeyringController:{vault:e.vault,selectedAccount:t.selectedAccount,walletNicknames:e.walletNicknames}};return delete r.vault,delete r.walletNicknames,delete r.config.selectedAccount,r}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #5${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[96,{lodash:6046},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:6,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=6;try{const e=function(e){const t=e.KeyringController,r={...e,PreferencesController:{selectedAddress:t.selectedAccount}};return delete r.KeyringController.selectedAccount,r}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #6${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[97,{lodash:6046},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:7,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=7;try{const e=function(e){const t={...e,TransactionManager:{transactions:e.transactions||[],gasMultiplier:e.gasMultiplier||1}};return delete t.transactions,delete t.gasMultiplier,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #7${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[98,{lodash:6046},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:8,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=8;try{const e=function(e){const t={...e,NoticeController:{noticesList:e.noticesList||[]}};return delete t.noticesList,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #8${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[99,{lodash:6046},function(){with(this)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:9,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=9;try{const e=function(e){const t=(0,n.merge)({},e,{CurrencyController:{currentCurrency:e.currentFiat||e.fiatCurrency||"USD",conversionRate:e.conversionRate,conversionDate:e.conversionDate}});return delete t.currentFiat,delete t.fiatCurrency,delete t.conversionRate,delete t.conversionDate,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #9${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$"}],[5,{"../../shared/constants/app":7055,"../../shared/constants/metametrics":7059,"../../shared/constants/time":7065,"../../shared/modules/mv3.utils":7082,"../../shared/modules/object.utils":7084,"./first-time-state":43,"./lib/createStreamSink":55,"./lib/ens-ipfs/setup":62,"./lib/get-first-preferred-lang-code":64,"./lib/getObjStructure":65,"./lib/local-store":66,"./lib/migrator":69,"./lib/network-store":70,"./lib/notification-manager":71,"./lib/setupSentry":87,"./lib/util":90,"./metamask-controller":91,"./migrations":166,"./platforms/extension":167,"@metamask/obs-store":1471,"@sentry/browser":1817,"debounce-stream":2619,"end-of-stream":2708,"eth-rpc-errors":2821,"extension-port-stream":3348,loglevel:6059,pump:6395,"webextension-polyfill":7029},function(){with(this)return function(){"use strict";return function(e,t,r){var n=N(e("end-of-stream")),s=N(e("pump")),o=N(e("debounce-stream")),i=N(e("loglevel")),a=N(e("webextension-polyfill")),c=e("@metamask/obs-store"),l=N(e("extension-port-stream")),d=e("@sentry/browser"),h=e("eth-rpc-errors"),u=e("../../shared/constants/app"),p=e("../../shared/constants/time"),g=e("../../shared/constants/metametrics"),m=e("../../shared/modules/mv3.utils"),f=e("../../shared/modules/object.utils"),y=N(e("./migrations")),C=N(e("./lib/migrator")),b=N(e("./platforms/extension")),k=N(e("./lib/local-store")),S=(N(e("./lib/network-store")),e("./lib/setupSentry")),w=N(e("./lib/createStreamSink")),v=I(e("./lib/notification-manager")),E=I(e("./metamask-controller")),T=N(e("./first-time-state")),M=N(e("./lib/get-first-preferred-lang-code")),A=N(e("./lib/getObjStructure")),P=N(e("./lib/ens-ipfs/setup")),_=e("./lib/util");function R(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(R=function(e){return e?r:t})(e)}function I(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var r=R(t);if(r&&r.has(e))return r.get(e);var n={},s=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if("default"!==o&&Object.prototype.hasOwnProperty.call(e,o)){var i=s?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,r&&r.set(e,n),n}function N(e){return e&&e.__esModule?e:{default:e}}const{sentry:x}=global,O={...T.default},U={[u.ENVIRONMENT_TYPE_POPUP]:!0,[u.ENVIRONMENT_TYPE_NOTIFICATION]:!0,[u.ENVIRONMENT_TYPE_FULLSCREEN]:!0},L=["trezor-connect"];i.default.setDefaultLevel("info");const D=new b.default,K=new v.default;global.METAMASK_NOTIFIER=K;let j=!1,F=!1,B=!1;const q={},H={};let $;const G=new k.default;let V;const Y=new URL("https://metamask.github.io/phishing-warning/latest/"),W=async e=>{a.default.runtime.onConnect.removeListener(W),await z(e),i.default.info("MetaMask initialization complete.")};async function z(e){const t=await async function(){const e=new C.default({migrations:y.default});e.on("error",console.warn),V=await G.get()||e.generateInitialState(O),V&&!V.data&&(V=e.generateInitialState(O),x.captureMessage("MetaMask - Empty vault found - unable to recover"));if(e.on("error",(e=>{const t=(0,A.default)(V);x.captureException(e,{extra:{vaultStructure:t}})})),V=await e.migrateData(V),!V)throw new Error("MetaMask - migrator returned undefined");G.isSupported?G.set(V):setTimeout((()=>{throw new Error("MetaMask - Localstore not supported")}));return V.data}(),r=await(0,M.default)();await function(e,t,r){function p(e){return V.data=e,V}$=new E.default({infuraProjectId:"8f4bc0ed77aa4a2c886a4d929754f414",showUserConfirmation:Q,openPopup:Z,initState:e,initLangCode:t,platform:D,notificationManager:K,browser:a.default,getRequestAccountTabIds:()=>H,getOpenMetamaskTabsIds:()=>q}),(0,P.default)({getCurrentChainId:$.networkController.getCurrentChainId.bind($.networkController),getIpfsGateway:$.preferencesController.getIpfsGateway.bind($.preferencesController),provider:$.provider}),(0,s.default)((0,c.storeAsStream)($.store),(0,o.default)(1e3),(0,c.storeTransformStream)(p),(0,w.default)(b),(e=>{i.default.error("MetaMask - Persistence pipeline failed",e)})),y=$,global.sentryHooks.getSentryState=function(){const e=y.getState(),t=(0,f.maskObject)({metamask:e},S.SENTRY_STATE);return{browser:window.navigator.userAgent,store:t,version:D.getVersion()}};var y;let C=!1;async function b(e){if(!e)throw new Error("MetaMask - updated state is missing");if(!e.data)throw new Error("MetaMask - updated state does not have data");if(G.isSupported)try{await G.set(e),C&&(C=!1)}catch(e){C||(C=!0,(0,d.captureException)(e)),i.default.error("error setting state in local store:",e)}}m.isManifestV3&&r&&M(r);a.default.runtime.onConnect.addListener(M),a.default.runtime.onConnectExternal.addListener(A);const k=()=>j||Boolean(Object.keys(q).length)||F,T=(e,t)=>{if(!1===e)$.onClientClosed();else{if(t===u.ENVIRONMENT_TYPE_FULLSCREEN&&Boolean(Object.keys(q).length))return;$.onEnvironmentTypeClosed(t)}};function M(e){var t;const r=e.name;if(L.includes(e.name))return;let s=!1;s=(0,_.getPlatform)()===u.PLATFORM_FIREFOX?U[r]:e.sender.origin===`chrome-extension://${a.default.runtime.id}`;const o=null!==(t=e.sender)&&void 0!==t&&t.url?new URL(e.sender.url):null;if(s){const t=new l.default(e);if($.isClientOpen=!0,$.setupTrustedCommunication(t,e.sender),m.isManifestV3&&e.postMessage({name:"CONNECTION_READY"}),r===u.ENVIRONMENT_TYPE_POPUP&&(j=!0,(0,n.default)(t,(()=>{j=!1;const e=k();$.isClientOpen=e,T(e,u.ENVIRONMENT_TYPE_POPUP)}))),r===u.ENVIRONMENT_TYPE_NOTIFICATION&&(F=!0,(0,n.default)(t,(()=>{F=!1;const e=k();$.isClientOpen=e,T(e,u.ENVIRONMENT_TYPE_NOTIFICATION)}))),r===u.ENVIRONMENT_TYPE_FULLSCREEN){const r=e.sender.tab.id;q[r]=!0,(0,n.default)(t,(()=>{delete q[r];const e=k();$.isClientOpen=e,T(e,u.ENVIRONMENT_TYPE_FULLSCREEN)}))}}else if(o&&o.origin===Y.origin&&o.pathname===Y.pathname){const t=new l.default(e);$.setupPhishingCommunication({connectionStream:t})}else{if(e.sender&&e.sender.tab&&e.sender.url){const t=e.sender.tab.id,r=new URL(e.sender.url),{origin:n}=r;e.onMessage.addListener((e=>{e.data&&"eth_requestAccounts"===e.data.method&&(H[n]=t)}))}A(e)}}function A(e){const t=new l.default(e);$.setupUntrustedCommunication({connectionStream:t,sender:e.sender})}function R(){let e="";const t=I();t&&(e=String(t)),m.isManifestV3?(a.default.action.setBadgeText({text:e}),a.default.action.setBadgeBackgroundColor({color:"#037DD6"})):(a.default.browserAction.setBadgeText({text:e}),a.default.browserAction.setBadgeBackgroundColor({color:"#037DD6"}))}function I(){const e=$.txController.getUnapprovedTxCount(),{unapprovedMsgCount:t}=$.messageManager,{unapprovedPersonalMsgCount:r}=$.personalMessageManager,{unapprovedDecryptMsgCount:n}=$.decryptMessageManager,{unapprovedEncryptionPublicKeyMsgCount:s}=$.encryptionPublicKeyManager,{unapprovedTypedMessagesCount:o}=$.typedMessageManager;return e+t+r+n+s+o+$.approvalController.getTotalApprovalCount()+$.appStateController.waitingForUnlock.length}function N(){Object.keys($.txController.txStateManager.getUnapprovedTxList()).forEach((e=>$.txController.txStateManager.setTxStatusRejected(e))),$.messageManager.messages.filter((e=>"unapproved"===e.status)).forEach((e=>$.messageManager.rejectMsg(e.id,g.REJECT_NOTFICIATION_CLOSE_SIG))),$.personalMessageManager.messages.filter((e=>"unapproved"===e.status)).forEach((e=>$.personalMessageManager.rejectMsg(e.id,g.REJECT_NOTFICIATION_CLOSE_SIG))),$.typedMessageManager.messages.filter((e=>"unapproved"===e.status)).forEach((e=>$.typedMessageManager.rejectMsg(e.id,g.REJECT_NOTFICIATION_CLOSE_SIG))),$.decryptMessageManager.messages.filter((e=>"unapproved"===e.status)).forEach((e=>$.decryptMessageManager.rejectMsg(e.id,g.REJECT_NOTFICIATION_CLOSE))),$.encryptionPublicKeyManager.messages.filter((e=>"unapproved"===e.status)).forEach((e=>$.encryptionPublicKeyManager.rejectMsg(e.id,g.REJECT_NOTFICIATION_CLOSE))),$.approvalController.clear(h.ethErrors.provider.userRejectedRequest()),R()}return R(),$.txController.on(E.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,R),$.messageManager.on(E.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,R),$.personalMessageManager.on(E.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,R),$.decryptMessageManager.on(E.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,R),$.encryptionPublicKeyManager.on(E.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,R),$.typedMessageManager.on(E.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,R),$.appStateController.on(E.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,R),$.controllerMessenger.subscribe(E.METAMASK_CONTROLLER_EVENTS.APPROVAL_STATE_CHANGE,R),K.on(v.NOTIFICATION_MANAGER_EVENTS.POPUP_CLOSED,(({automaticallyClosed:e})=>{e?I()>0&&Q():N()})),Promise.resolve()}(t,r,e),m.isManifestV3||await async function(){let e;try{const t=new URL("https://metamask.github.io/phishing-warning/latest/");let r,n;t.hash="#extensionStartup",e=window.document.createElement("iframe"),e.setAttribute("src",t.href),e.setAttribute("sandbox","allow-scripts allow-same-origin");const s=new Promise(((e,t)=>{r=e,n=t}));e.addEventListener("load",r),window.document.body.appendChild(e),setTimeout((()=>n(new J)),1e3),await s}catch(e){e instanceof J?console.warn("Phishing warning page timeout; page not guaraneteed to work offline."):console.error("Failed to initialize phishing warning page",e)}finally{e&&e.remove()}}(),i.default.info("MetaMask initialization complete.")}m.isManifestV3?a.default.runtime.onConnect.addListener(W):z().catch(i.default.error);class J extends Error{constructor(){super("Timeout failed")}}async function Q(){const e=await D.getActiveTabs(),t=Boolean(e.find((e=>q[e.id]))),r=e.length>0&&e[0].extData&&e[0].extData.indexOf("vivaldi_tab")>-1;if(!B&&(r||!j)&&!t){B=!0;try{await K.showPopup()}finally{B=!1}}}async function Z(){await Q(),await new Promise((e=>{const t=setInterval((()=>{F||(clearInterval(t),e())}),p.SECOND)}))}const X=()=>{if($)return $.metaMetricsController.updateTraits({[g.TRAITS.INSTALL_DATE_EXT]:(new Date).toISOString().split("T")[0]}),void $.metaMetricsController.addEventBeforeMetricsOptIn({category:g.EVENT.CATEGORIES.APP,event:g.EVENT_NAMES.APP_INSTALLED,properties:{}});setTimeout((()=>{X()}),1e3)};a.default.runtime.onInstalled.addListener((({reason:e})=>{"install"===e&&(X(),D.openExtensionInBrowser())}))}}},{package:"$root$"}]],[5],{});